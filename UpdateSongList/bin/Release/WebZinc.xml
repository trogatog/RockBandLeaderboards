<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebZinc</name>
    </assembly>
    <members>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.Ole.DispId">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_WINDOWOBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_LOCATIONOBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_HISTORYOBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_NAVIGATOROBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_SECURITYCTX">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_AMBIENT_DLCONTROL">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_AMBIENT_USERAGENT">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DISPID_SECURITYDOMAIN">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_DLIMAGES">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_VIDEOS">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_BGSOUNDS">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_SCRIPTS">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_JAVA">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_RUNACTIVEXCTLS">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_DLACTIVEXCTLS">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_DOWNLOADONLY">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_FRAMEDOWNLOAD">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_RESYNCHRONIZE">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_PRAGMA_NO_CACHE">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_BEHAVIORS">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_METACHARSET">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_URL_ENCODING_DISABLE_UTF8">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_URL_ENCODING_ENABLE_UTF8">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_FORCEOFFLINE">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_NO_CLIENTPULL">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_SILENT">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_OFFLINEIFNOTCONNECTED">
            <summary>
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DispId.DLCTL_OFFLINE">
            <summary>
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite.SaveObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite.GetMoniker(System.UInt32,System.UInt32,System.Object@)">
            <summary>
            
            </summary>
            <param name="dwAssign"></param>
            <param name="dwWhichMoniker"></param>
            <param name="ppmk"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite.GetContainer(System.Object@)">
            <summary>
            
            </summary>
            <param name="ppContainer"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite.ShowObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite.OnShowWindow(System.Boolean)">
            <summary>
            
            </summary>
            <param name="fShow"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite.RequestNewObjectLayout">
            <summary>
            
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.SetClientSite(WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite)">
            <summary>
            
            </summary>
            <param name="pClientSite"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetClientSite(WhiteCliff.WebZinc.WebBrowser.Ole.IOleClientSite@)">
            <summary>
            
            </summary>
            <param name="ppClientSite"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.SetHostNames(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="szContainerApp"></param>
            <param name="szContainerObj"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.Close(System.UInt32)">
            <summary>
            
            </summary>
            <param name="dwSaveOption"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.SetMoniker(System.UInt32,System.Object)">
            <summary>
            
            </summary>
            <param name="dwWhichMoniker"></param>
            <param name="pmk"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetMoniker(System.UInt32,System.UInt32,System.Object)">
            <summary>
            
            </summary>
            <param name="dwAssign"></param>
            <param name="dwWhichMoniker"></param>
            <param name="ppmk"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.InitFromData(System.Object,System.Boolean,System.UInt32)">
            <summary>
            
            </summary>
            <param name="pDataObject"></param>
            <param name="fCreation"></param>
            <param name="dwReserved"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetClipboardData(System.UInt32,System.Object@)">
            <summary>
            
            </summary>
            <param name="dwReserved"></param>
            <param name="ppDataObject"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.DoVerb(System.UInt32,System.UInt32,System.Object,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="iVerb"></param>
            <param name="lpmsg"></param>
            <param name="pActiveSite"></param>
            <param name="lindex"></param>
            <param name="hwndParent"></param>
            <param name="lprcPosRect"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.EnumVerbs(System.Object@)">
            <summary>
            
            </summary>
            <param name="ppEnumOleVerb"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.IsUpToDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetUserClassID(System.UInt32)">
            <summary>
            
            </summary>
            <param name="pClsid"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetUserType(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="dwFormOfType"></param>
            <param name="pszUserType"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.SetExtent(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="dwDrawAspect"></param>
            <param name="psizel"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetExtent(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="dwDrawAspect"></param>
            <param name="psizel"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.Advise(System.Object,System.UInt32)">
            <summary>
            
            </summary>
            <param name="pAdvSink"></param>
            <param name="pdwConnection"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.Unadvise(System.UInt32)">
            <summary>
            
            </summary>
            <param name="dwConnection"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.EnumAdvise(System.Object@)">
            <summary>
            
            </summary>
            <param name="ppenumAdvise"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.GetMiscStatus(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="dwAspect"></param>
            <param name="pdwStatus"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject.SetColorScheme(System.Object)">
            <summary>
            
            </summary>
            <param name="pLogpal"></param>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.Ole.DOCHOSTUIINFO">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DOCHOSTUIINFO.cbSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DOCHOSTUIINFO.dwFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DOCHOSTUIINFO.dwDoubleClick">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DOCHOSTUIINFO.pchHostCss">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.DOCHOSTUIINFO.pchHostNS">
            <summary>
            
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG.hwnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG.message">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG.wParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG.lParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG.time">
            <summary>
            
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.WebBrowser.Ole.tagMSG.pt">
            <summary>
            
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Image">
            <summary>
            Represents an Image within a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.HtmlElementBase">
            <summary>
            The abstract class that all WebZinc html elements inherit
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.HtmlObject">
            <summary>
            The abstract class that all WebZinc html objects inherit
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.HtmlElementBase.GetAttribute(System.String)">
            <summary>
            Gets the value of a specified attribute for this HtmlElement
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.HtmlElementBase.PromoteToBody">
            <summary>
            Promotes the current object to the main body of the document. Please note that there can have unexpected side-effects
            when attempting to access objects after applying this function.
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.HtmlElementBase.ResetPromote">
            <summary>
            Undoes a call to PromoteToBody()
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementBase.Html">
            <summary>
            Returns the Html code behind this element
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementBase.Text">
            <summary>
            Returns the text for this element
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementBase.CssClass">
            <summary>
            Returns the text for this element
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Image.SaveImage(System.String)">
            <summary>
            Downloads the image and saves it (in the default format) to the specified file.
            </summary>
            <param name="fileName">The local filename to save the image to.</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Image.SaveImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Downloads the image and saves it to the specified file.
            </summary>
            <param name="fileName">The local filename to save the image to</param>
            <param name="imageFormat">The format to save the image in</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Image.GetImage">
            <summary>
            Downloads the referenced picture and returns its System.Drawing.Image object
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Image.Width">
            <summary>
            Returns the width of the image in pixels
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Image.Height">
            <summary>
            Returns the height of the image in pixels
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Image.LinkTo">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.Link"/> object that this image links to.
            </summary>
            <remarks>
            Returns null if no link exists.
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Image.URL">
            <summary>
            Returns the URL that this image is loaded from
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Image.FileName">
            <summary>
            Returns the filename of this image
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Image.Text">
            <summary>
            Returns the description text for this image.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.FormTextAreaField">
            <summary>
            Represents an input field in a <see cref="T:WhiteCliff.WebZinc.Objects.Form"/> object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.IFormField">
            <summary>
            The interface implemented by all Form field objects
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.IFormField.Value">
            <summary>
            Gets the value of the form field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.IFormField.Name">
            <summary>
            Gets the name of the form field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.IFormField.LabelText">
            <summary>
            Gets the label text associated with this form field
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.FormTextAreaField.Click">
            <summary>
            Simulates a user clicking the input field
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormTextAreaField.Value">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormTextAreaField.Name">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormTextAreaField.LabelText">
            <summary>
            Attempts to determine the "label" associated with this field
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.SoundEx.KnuthEd2SoundEx">
            <summary>
            This SoundEx is described in Knuth TAOCP Vol3 Edition 2, pg 394-395
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.SoundEx.ISoundEx">
            <summary>
            Abstract base class for all SoundEx implementations
            Could also be used for other phonetic matching algorithms
            such as "Metaphone"/"Metaphon".
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.SoundEx.ISoundEx.Difference(System.String,System.String)">
            <summary>
            Implements the Difference algorithm, as found in SQL Server
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns>0-4 depending on the similarity of the two words</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.SoundEx.ISoundEx.EncodeChar(System.Char)">
            <summary>
            Marked as virtual so that concrete ISoundEx implementations can
            replace this and add extra characters for encoding.
            For example, the Online Dictionary of Computings specifies
            several extra characters in the lookup table.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.FtpServer">
            <summary>
            A class storing information about a specific FTP server
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpServer.RemoteHost">
            <summary>
            The remote address of the FTP server
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpServer.UserName">
            <summary>
            The username required to login to the FTP server
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpServer.Password">
            <summary>
            The password required to login to the FTP server
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpServer.Passive">
            <summary>
            A value indicating whether or not to connect in passive mode
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpServer.Timeout">
            <summary>
            The timeout period whilst attempting to connect to the FTP Server
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpServer.Name">
            <summary>
            An identifying name for this server
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.FtpServer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object
            </summary>
            <param name="remoteHost"></param>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.FormSelectFieldCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.FormSelectField"/> objects.
            </summary>
            <remarks>
            This collection contains all the &lt;select tags within a &lt;form tag.
            </remarks>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.CollectionBase">
            <summary>
            The base class implemented by all WebZinc object collections
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Collections.CollectionBase._collectionElements">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.#ctor(System.Int32,WhiteCliff.WebZinc.Objects.Page,System.Boolean)">
            <summary>
            The default constructor of the base collection
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.AddCollectionObject(System.Int32,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.AddCollectionObject(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.AddCollectionObject(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.AddCollectionObject(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.GetCollectionObject(System.Int32)">
            <summary>
            Returns a collection object at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.GetCollectionObject(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.UpdateCollectionObject(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.InitializeArrays(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.InitializeArrays">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.InitializeArrays(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.GetObject(System.Int32)">
            <summary>
             required for CollectionEnumerator
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection interface (not implemented)
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.GetEnumerator">
            <summary>
            Returns an IEnumerator for the <see cref="T:WhiteCliff.WebZinc.Collections.CollectionBase"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.CollectionBase.Count">
            <summary>
            Returns the number of elements in this collection
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.CollectionBase.SyncRoot">
            <summary>
            ICollection interface (not implemented)
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.CollectionBase.IsSynchronized">
            <summary>
            ICollection interface (not implemented)
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.CollectionBase.IsReadOnly">
            <summary>
            Returns true. 
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.CollectionBase.CollectionEnumerator.#ctor(WhiteCliff.WebZinc.Collections.CollectionBase)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormSelectFieldCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating if an object with the specified key exists
            </summary>
            <param name="key">The key to search for</param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormSelectFieldCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.FormSelectField"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormSelectFieldCollection.Item(System.String)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.FormSelectField"/> object with the specified key
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.PageGrab">
            <summary>
            Contains instructions on elements to grab from a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object
            </summary>
            <remarks>
            Can either be used from the <see cref="T:WhiteCliff.WebZinc.Xml.AutoZinc"/> object or manually populated with
            data for template processing.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object
            </summary>
            <param name="name"></param>
            <param name="url"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object.
            </summary>
            <remarks>
            This constructor should be used when creating a PageGrab object when the 
            data is going to be added by the programmer (ie for template processing only).
            </remarks>
            <param name="name"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.Save(System.String)">
            <summary>
            Saves this Grab object to the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.ProcessXslTemplateToFile(System.String,System.String)">
            <summary>
            Applies an XSL template to the Elements collection of this object and saves the result to the specified file
            </summary>
            <param name="templatePath">The path to the XSL template</param>
            <param name="destinationFile">The destination to save the result</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.ProcessXslTemplate(System.String)">
            <summary>
            Applies an XSL template to the Elements collection of this object
            </summary>
            <param name="templatePath">The path to the XSL template</param>
            <returns>The contents of the template after processing.</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.ProcessWebZincTemplateToFile(System.String,System.String)">
            <summary>
            Processes a template with the current PageGrab object and the specified template file 
            </summary>
            <param name="templatePath"></param>
            <param name="destinationFile"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageGrab.ProcessWebZincTemplate(System.String)">
            <summary>
            Processes a template 
            </summary>
            <param name="templatePath"></param>
            <returns>The contents of the template after processing.</returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.Elements">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.ElementCollection"/> object associated with this object
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.Rules">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Collections.RuleCollection"/> object containing rules to apply
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.Url">
            <summary>
            Gets or sets the Url that should be fetched
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.Processed">
            <summary>
            Returns/sets if the page has been processed. If this
            is false after processing, then the page was unavailable
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.Template">
            <summary>
            Specifies the template information
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.UploadUsing">
            <summary>
            The name of the server to upload the template file to
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.UploadUsingObject">
            <summary>
            The server object to upload using.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.UploadPath">
            <summary>
            The remote path and filename to upload to
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageGrab.Name">
            <summary>
            An identifying name for this page
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebZincException">
            <summary>
            The general exception thrown by any WebZinc objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincException.#ctor(System.String)">
            <summary>
            Creates a new instance of the WebZincException class
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincException.#ctor(System.Exception)">
            <summary>
            Creates a WebZinc exception out of a normal exception
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebZincFtpException">
            <summary>
            The exception that is thrown by the <see cref="T:WhiteCliff.WebZinc.Extras.Ftp"/> object.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincFtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincFtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and inner exception
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="T:WhiteCliff.WebZinc.ProgressType">
            <summary>
            An enumeration of progress types
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.ProgressType.None">
            <summary>
            There is no current progress type set
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.ProgressType.Connecting">
            <summary>
            Currently attempting to connect to a specified host
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.ProgressType.RequestingData">
            <summary>
            Currently requesting data from a specified host
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.ProgressType.ReceivingData">
            <summary>
            Currently receiving data
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.ProgressType.Connected">
            <summary>
            We have successfully connected
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.BeforeNavigateEventArgs">
            <summary>
            The arguments for the <see cref="T:WhiteCliff.WebZinc.BeforeNavigateHandler"/> delegate
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.BeforeNavigateEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.BeforeNavigateEventArgs"/> class
            </summary>
            <param name="url"></param>
        </member>
        <member name="F:WhiteCliff.WebZinc.BeforeNavigateEventArgs.Url">
            <summary>
            Gets or sets the Url that would be navigated to
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.BeforeNavigateEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the current operation
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.OnProgressChangeEventArgs">
            <summary>
            The arguments for the <see cref="T:WhiteCliff.WebZinc.OnProgressChangeHandler"/> delegate
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.OnProgressChangeEventArgs.#ctor(WhiteCliff.WebZinc.ProgressType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.OnProgressChangeEventArgs"/> class
            </summary>
            <param name="ProgressStage"></param>
            <param name="Progress"></param>
            <param name="ProgressMax"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.OnProgressChangeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.OnProgressChangeEventArgs"/> class
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.OnProgressChangeEventArgs.ProgressStage">
            <summary>
            Gets or sets the current progress type
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.OnProgressChangeEventArgs.PageUrl">
            <summary>
            The URL of the page you are receiving notification for
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.OnProgressChangeEventArgs.Progress">
            <summary>
            Gets or sets the current progress
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.OnProgressChangeEventArgs.ProgressMax">
            <summary>
            Gets or sets the maximum value that <see cref="F:WhiteCliff.WebZinc.OnProgressChangeEventArgs.Progress"/> will reach
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.OnProgressChangeEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the current operation
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.OnProgressChangeHandler">
            <summary>
            Represents the method that will handle the OnProgressChange event
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.OnDocumentChangeHandler">
            <summary>
            Represents the method that will handle the OnDocumentChange event
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.BeforeNavigateHandler">
            <summary>
            Represents the method that will handle the BeforeNavigate event of the WebZincUI object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.IWebZincEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincEvents.OnProgressChange(System.Object,WhiteCliff.WebZinc.OnProgressChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincEvents.OnDocumentChange(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:WhiteCliff.WebZinc.IWebZincBase">
            <summary>
            The common interface implemented by both the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> and <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> objects
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincBase.Abort">
            <summary>
            Aborts the current operation
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincBase.OpenPage(System.String)">
            <summary>
            Opens a the specified url
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincBase.CurrentPage">
            <summary>
            Returns the last Page object that was loaded
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincBase.Rules">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Collections.RuleCollection"/> object
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincBase.Settings">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Configuration"/> object
            </summary>
        </member>
        <member name="E:WhiteCliff.WebZinc.IWebZincBase.OnProgressChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:WhiteCliff.WebZinc.IWebZincBase.OnDocumentChange">
            <summary>
            Triggered when the CurrentPage property changes
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.IWebZinc">
            <summary>
            The interface implemented by the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZinc.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZinc.OpenPage(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZinc.PostToPage(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZinc.CurrentPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZinc.Rules">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZinc.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZinc.Cookies">
            <summary>
            
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.IWebZincUI">
            <summary>
            The interface implemented by the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincUI.Abort">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincUI.OpenPage(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincUI.SetBrowserControl(WhiteCliff.WebZinc.WebBrowser.WebZincBrowser)">
            <summary>
            
            </summary>
            <param name="newBrowser"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.IWebZincUI.Print(System.Boolean)">
            <summary>
            
            </summary>
            <param name="showUI"></param>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincUI.CurrentPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincUI.Rules">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincUI.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.IWebZincUI.DefaultBrowserVisible">
            <summary>
            
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebZinc">
            <summary>
            The main WebZinc class
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.IWebZincInternal">
            <summary>
            Private interface implemented by both webZinc objects
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the WebZinc object
            </summary>
            <remarks>
            For use by the Visual Studio .NET designer
            </remarks>
            <param name="container">The container</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> class,
            and opens the specified Url
            </summary>
            <remarks>
            This is equivilant to creating a WebZinc object and then
            calling the OpenSite method
            </remarks>
            <param name="openUrl">The Url to open using WebZinc.</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.OpenPage(System.String)">
            <summary>
            Queries the specified URL and populates the CurrentPage object
            </summary>
            <param name="url">The url of the page to open</param>
            <returns>The resulting Page object</returns>
            <example>
            <code lang="vb">
            Dim myWZ As WebZinc = New WebZinc()
            ' open "someurl.com" and display the title
            Dim myPage As Page = myWZ.OpenPage("http://www.someurl.com");
            MessageBox.Show(myPage.Title)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.GetURLStream(System.String)">
            <summary>
            Gets a stream object for a particular URL whilst preserving the session
            that Webzinc is currently using.
            </summary>
            <param name="url"></param>
            <returns></returns>
            <example>
            <code lang="c#">
            Stream readStream = myWZ.GetURLStream("http://www.someurl.com/fred.asp")
            string saveTo = "some path to save"
            // create a write stream
            FileStream writeStream = new FileStream(saveTo, FileMode.Create, FileAccess.Write);
            // write to the stream
            WhiteCliff.WebZinc.Extras.Ftp.ReadWriteStream(readStream,writeStream);
            // close everything
            writeStream.Close();
            readStream.Close();
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.PostToPage(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Posts the specified form data to the url
            </summary>
            <remarks>This should not be used on ASP.NET pages that require a __VIEWSTATE field - unless you can provide it, 
            otherwise posting will have no effect. Instead, load the page first using OpenPage, and submit the form as usual.</remarks>
            <param name="url">The url of the page to open</param>
            <param name="formData">The form data to post</param>
            <returns>The resulting Page object</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.PostToPage(System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Posts the specified form data to the url
            </summary>
            <param name="url">The url of the page to open</param>
            <param name="formData">The form data to post</param>
            <param name="usePOST">Indicates whether to use the POST method. If set to false, the request will use GET</param>
            <example><see cref="M:WhiteCliff.WebZinc.WebZinc.PostToPage(System.String,System.Collections.Specialized.NameValueCollection,System.Boolean,System.Boolean)"/></example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.PostToPage(System.String,System.Collections.Specialized.NameValueCollection,System.Boolean,System.Boolean)">
            <summary>
            Posts the specified form data to the url
            </summary>
            <returns>The resulting Page object</returns>
            <remarks>This should not be used on ASP.NET pages that require a __VIEWSTATE field - unless you can provide it, 
            otherwise posting will have no effect. Instead, load the page first using OpenPage, and submit the form as usual.</remarks>
            <param name="url">The url of the page to open</param>
            <param name="formData">The form data to post</param>
            <param name="usePOST">Indicates whether to use the POST method. If set to false, the request will use GET</param>
            <param name="useMultiPart">Indicates whether or not to submit the data in multipart format</param>
            <example>Here's a simple demonstration of this method
            <code lang="csharp">
            // Create the Form or QueryString data we want to submit
            NameValueCollection queryData = new NameValueCollection();
            queryData.Add("q",txtSearch.Text);
            queryData.Add("tt","on");
            queryData.Add("nm","on");
            queryData.Add("mx","20");
            // send to the page
            // for this example, we're passing false to the usePOST
            // parameter, and so this data will actually just be
            // added as a QueryString to the page
            // ie find?q=searchText&amp;tt=on&amp;nm=on&amp;mx=20
            Page resultsPage = wz.PostToPage("http://www.imdb.org/find",queryData,false,false);
            </code>
            <code lang="vb">
            // Create the Form or QueryString data we want to submit
            Dim queryData As New NameValueCollection()
            queryData.Add("q",txtSearch.Text)
            queryData.Add("tt","on")
            queryData.Add("nm","on")
            queryData.Add("mx","20")
            ' send to the page
            ' for this example, we're passing false to the usePOST
            ' parameter, and so this data will actually just be
            ' added as a QueryString to the page
            ' ie find?q=searchText&amp;tt=on&amp;nm=on&amp;mx=20
            Dim resultsPage As Page = wz.PostToPage("http://www.imdb.org/find",queryData,False,False)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.Abort">
            <summary>
            Aborts the current action
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.LoadDocumentHtml(System.String)">
            <summary>
            Generates a IHTMLDocument2 interface given the Html
            </summary>
            <param name="data">The html to load</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZinc.Finalize">
            <summary>
            Disposes the WebZinc object
            </summary>
        </member>
        <member name="E:WhiteCliff.WebZinc.WebZinc.OnProgressChange">
             <summary>
             Triggered when progress changes
             </summary>
             <example>
             Demonstrates how to tie up a handler to the OnProgressChange event.
             <code lang="csharp">
             //
             // attach the event handler
             myWebZincObject.OnProgressChange += new OnProgressChangeHandler(webZinc_ProgressChange);
             
             // this is the event handling function:
             private void webZinc_ProgressChange(object sender, OnProgressChangeEventArgs e)
             {
            		if (e.ProgressStage == ProgressType.ReceivingData) {
            			// set my progress bar
            			progressBar.Maximum = e.ProgressMax;
            			progressBar.Value = e.Progress;
            		}
            	}
             </code>
             <code lang="vb">
             // the sub handles the OnProgressChange event
             Private Sub webZinc_ProgressChange(ByVal sender As Object, ByVal e As OnProgressChangeEventArgs) Handles myWebZincObject.OnProgressChange
            
            		If e.ProgressStage = ProgressType.ReceivingData Then
            			progressBar.Maximum = e.ProgressMax 'Convert.ToInt32(progressMax);
            			progressBar.Value = e.Progress
            		End If
            		
             End Sub
             </code>
             </example>
        </member>
        <member name="E:WhiteCliff.WebZinc.WebZinc.OnDocumentChange">
            <summary>
            Triggered when the CurrentPage property changes
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZinc.Cookies">
            <summary>
            Gets or sets the collection of cookies that are currently "persisted" within WebZinc
            </summary>
            <example>This sample demonstrates how you could set a custom cookie
            <code lang="csharp">
            // load a WebZinc object
            WebZinc webZinc = new WebZinc();
            // set a custom cookie for WebZinc to serve to the page
            webZinc.Cookies.Add(new Cookie("CookieValue","CookieName"));
            // open the site
            webZinc.OpenPage("http://www.google.com/");
            </code>
            <code lang="vb">
            ' load a WebZinc object
            Dim webZinc As New WebZinc()
            ' set a custom cookie for WebZinc to serve to the page
            webZinc.Cookies.Add(New Cookie("CookieValue","CookieName"))
            ' open the site
            webZinc.OpenPage("http://www.google.com/")
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZinc.CurrentPage">
            <summary>
            Returns the last page object that was generated 
            </summary>
            <example>This sample demonstrates how to use the CurrentPage object
            <code lang="csharp">
            // load a WebZinc object and open a site
            WebZinc webZinc = new WebZinc("http://news.google.com/");
            // display the first paragraph
            MessageBox.Show(webZinc.CurrentPage.Paragraphs[0]);
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZinc.Settings">
            <summary>
            Gets or sets the Settings object for WebZinc
            </summary>
            <example>
            <code lang="vb">
            Dim myWZ As WebZinc = New WebZinc()
            ' set the timeout to 10000 milliseconds
            myWZ.Settings.Timeout = 10000
            ' open the slow loading page
            myWZ.OpenPage("http://www.someurl.com/")
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZinc.Rules">
            <summary>
            Returns the collection of rules associated with this WebZinc object
            </summary>
            The sample below demonstrates creating a new rule that removes all Paragraphs containing the text "advertisement":
            <code lang="vb">
            ' create the rule
            Dim myRule As New Rule(PageObjectType.Paragraph, RuleCondition.ContainsWord, "advertisement", true)
            ' add the rule to the collection
            MyWebZinc.Rules.Add(myRule)
            </code>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebZincUI">
            <summary>
            This provides a WebZinc object when you need to display the
            WebBrowser to the user.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the WebZincUI object
            </summary>
            <param name="container">The container</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> class,
            and opens the specified Url
            </summary>
            <remarks>
            This is equivilant to creating a WebZinc object and then
            calling the OpenSite method
            </remarks>
            <param name="openUrl">The Url to open using WebZinc.</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.Print(System.Boolean)">
            <summary>
            Prints the page currently loaded in the WebZinc browser
            </summary>
            <param name="showUI">true to display a Print dialog, false to automatically print</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.SetBrowserControl(WhiteCliff.WebZinc.WebBrowser.WebZincBrowser)">
            <summary>
            
            </summary>
            <remarks>You should set all the options before calling this</remarks>
            <param name="newBrowser"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.SetBrowserControl(WhiteCliff.WebZinc.WebBrowser.WebZincBrowser,WhiteCliff.WebZinc.WebBrowserOptions)">
            <summary>
            Gets or sets a reference to the BrowserControl to use as the
            WebZinc browser. Set this property if you wish to provide a 
            custom browser window.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.OpenPage(System.String)">
            <summary>
            Queries the specified URL and waits for the CurrentPage object to be populated
            </summary>
            <param name="url">The url of the page to open</param>
            <returns>A reference to current Page object. Note that as the WebZincUI object is
            "attached" to the web browser, when you open a new page, the original object returned
            by this function will also point to the new page.</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.UpdateCurrentPage">
            <summary>
            Updates our currentPage object to the current document
            in the browserControl
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.Abort">
            <summary>
            Aborts the current process
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.BrowserGoForward">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.BrowserGoBack">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.Dispose(System.Boolean)">
            <summary>
            Disposes this object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebZincUI.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="E:WhiteCliff.WebZinc.WebZincUI.OnProgressChange">
             <summary>
             Triggered when progress changes
             </summary>
             <example>
             Demonstrates how to tie up a handler to the OnProgressChange event.
             <code lang="csharp">
             //
             // attach the event handler
             myWebZincObject.OnProgressChange += new OnProgressChangeHandler(webZinc_ProgressChange);
             
             // this is the event handling function:
             private void webZinc_ProgressChange(object sender, OnProgressChangeEventArgs e)
             {
            		if (e.ProgressStage == ProgressType.ReceivingData) {
            			// set my progress bar
            			progressBar.Maximum = e.ProgressMax;
            			progressBar.Value = e.Progress;
            		}
            	}
             </code>
             <code lang="vb">
             // the sub handles the OnProgressChange event
             Private Sub webZinc_ProgressChange(ByVal sender As Object, ByVal e As OnProgressChangeEventArgs) Handles myWebZincObject.OnProgressChange
            
            		If e.ProgressStage = ProgressType.ReceivingData Then
            			progressBar.Maximum = e.ProgressMax 'Convert.ToInt32(progressMax);
            			progressBar.Value = e.Progress
            		End If
            		
             End Sub
             </code>
             </example>
        </member>
        <member name="E:WhiteCliff.WebZinc.WebZincUI.OnDocumentChange">
            <summary>
            Triggered when the CurrentPage property changes
            </summary>
        </member>
        <member name="E:WhiteCliff.WebZinc.WebZincUI.BeforeNavigate">
            <summary>
            Triggered before WebZinc navigates to another page (usually triggered by user interaction)
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZincUI.DefaultBrowserVisible">
            <summary>
            Gets or sets a value indicating whether the default browser window is displayed.
            </summary>
            <remarks>
            If you do not wish to provide your own "custom" browser window, you may
            use this property to display a default one.
            </remarks>
            <example>This sample demonstrates showing the browser window.
            <code lang="csharp">
            // load a WebZinc object
            WebZinc webZinc = new WebZinc();
            // display the browser window so we can monitor progress
            webZinc.DefaultBrowserVisible = true;
            // open the site
            webZinc.OpenPage("http://www.google.com/");
            </code>
            <code lang="vb">
            ' load a WebZinc object
            Dim webZinc As New WebZinc()
            ' display the browser window so we can monitor progress
            webZinc.DefaultBrowserVisible = True
            ' open the site
            webZinc.OpenPage("http://www.google.com/")
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZincUI.CurrentPage">
            <summary>
            Returns the current page object.
            </summary>
            <example>This sample demonstrates how to use the CurrentPage object
            <code lang="csharp">
            // load a WebZinc object and open a site
            WebZinc webZinc = new WebZinc("http://news.google.com/");
            // display the first paragraph
            MessageBox.Show(webZinc.CurrentPage.Paragraphs[0]);
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZincUI.Settings">
            <summary>
            Returns/sets the Settings object for WebZinc
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebZincUI.Rules">
            <summary>
            Returns the rules for WebZinc to apply
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowserOptions">
            <summary>
            Provides options for how WebZinc retreives pages
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.FollowRedirect">
            <summary>
            Whether to automatically follow a redirection command from the server.
            </summary>
            <remarks>
            Only applies when using the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> object. By default this is True
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.ProtocolVersion">
            <summary>
            Gets or sets the HTTP protocol version to use. 
            </summary>
            <remarks>Should be set to either System.Net.HttpVersion.Version11 or System.Net.HttpVersion.Version10</remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.KeepAlive">
            <summary>
            Gets or sets whether the HTTP connection should be kept alive
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.Encoding">
            <summary>
            Specifies which encoding WebZinc should use if it cannot detect it.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.ThrowErrorOnServerError">
            <summary>
            Whether to throw an error when we encounter a server error (such as a 404 page not found or a 500 script error).
            </summary>
            <remarks>
            By default this is False
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.AllowPopups">
            <summary>
            Whether the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object allows new Internet Explorer
            windows to open on request.
            </summary>
            <remarks>
            By default this is False
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.AllowDefaultContextMenu">
            <summary>
            Whether the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object allows the standard IE
            context menu to appear when right-clicking in the WebZinc browser window
            </summary>
            <remarks>
            By default this is False
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.LoadPictures">
            <summary>
            Gets or sets a value indicating whether to load pictures in the WebBrowser
            </summary>
            <remarks>
            By default this is False
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.UserAgent">
            <summary>
            Gets or sets the user agent to report when requesting pages.
            </summary>
            <remarks>
            Can be used to impersonate a particular browser. Only applies to the WebZinc object. Sets the HTTP_USER_AGENT header.
            </remarks>
            <example>
            Possible UserAgent tags include:
            <list type="table">
            <item><term>Mozilla/4.0 (compatible; MSIE 5.5; Windows 98)</term><description>IE 5.5 running on Windows 98</description></item>
            <item><term>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)</term><description>IE 6 runniing on Windows 2000</description></item>
            </list>
            
            Mozilla/4.0 (compatible; MSIE 6.0; Windows 98)
            
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.HttpReferrer">
            <summary>
            Gets or sets the referring page to report when requesting pages
            </summary>
            <remarks>
            Can be used to convince a page is being requested from another location. Only applies to the WebZinc object. Sets the HTTP_REFERER header.
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.LoadFrames">
            <summary>
            Gets or sets a value indicating whether to load the contents of frames into the browser.
            </summary>
            <remarks>
            Set to false by default to improve performance.
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.ShowUI">
            <summary>
            Gets or sets a value indicating whether the WebBrowser is permitted to 
            display dialog boxes, such as alert dialogs generated by JavaScript.
            </summary>
            <remarks>By default this is set to False
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.AllowJavaScript">
            <summary>
            Gets or sets a value indicating whether to allow JavaScript to be executed
            when requesting the page.
            </summary>
            <remarks>
            This should be set to true before calling the <see cref="M:WhiteCliff.WebZinc.Objects.Page.RunScript(System.String)"/> method. By default this is set to False.
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.AllowPlugIns">
            <summary>
            Gets or sets a value indicating whether to allow ActiveX and Java applets
            to run in requested pages.
            </summary>
            <remarks>
            Only applies to the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowserOptions.Timeout">
            <summary>
            The timeout period when requesting a web page (in milliseconds).
            </summary>
            <remarks>Default is 30000 milliseconds (30 seconds).</remarks>
        </member>
        <member name="T:WhiteCliff.WebZinc.Configuration">
            <summary>
            Provides configuration information for WebZinc
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Configuration"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Configuration.Save(System.String)">
            <summary>
            Saves this object to an XML file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Configuration.Load(System.String)">
            <summary>
            Loads a <see cref="T:WhiteCliff.WebZinc.Configuration"/> object from an XML file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Configuration.OverrideThreading">
            <summary>
            Gets or sets a value indicating whether to override the standard threading behavoir of the WebZinc component. 
            </summary>
            <remarks>
            <para>By default, WebZinc initiates a new thread when in the ApartmentState is in STA mode
            in order to allow the current thread to continue to run whilst connecting to a website.</para>
            <para>This only applies to the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> object.</para>
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Configuration.Proxy">
            <summary>
            Gets or sets the Proxy to use with the <see cref="T:WhiteCliff.WebZinc.WebZinc"/> object
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Configuration.Credentials">
            <summary>
            Gets or sets the username and password combination to use when requesting websites
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Configuration.ClientCertificate">
            <summary>
            Gets or sets the username and password combination to use when requesting websites
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Configuration.BrowserOptions">
            <summary>
            Gets or sets the additional options to use when retreiving web pages
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.AxWebBrowser">
            <summary>
            Summary description for AxWebBrowser.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.FormOptionField">
            <summary>
            Represents a possible option in a <see cref="T:WhiteCliff.WebZinc.Objects.FormSelectField"/> object.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.FormOptionField.Click">
            <summary>
            Simulates a user clicking the input field
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormOptionField.Value">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormOptionField.Selected">
            <summary>
            Indicates whether this option is selected
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormOptionField.DefaultSelected">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormOptionField.LabelText">
            <summary>
            Attempts to determine the "label" associated with this field
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.NetConnection">
            <summary>
            Provides internet connection dialup functions.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.NetConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Extras.NetConnection"/> class.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.NetConnection.DialInternet">
            <summary>
            Automatically dials a connection to the internet
            </summary>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.NetConnection.DialInternet(System.Boolean)">
            <summary>
            Dials a connection to the internet
            </summary>
            <param name="automatic">Whether to automatically dial, or to simply display the standard connection dialog</param>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.NetConnection.HangupInternet">
            <summary>
            Disconnects from the internet
            </summary>
            <returns>A boolean value indicating success or failure</returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Extras.NetConnection.IsConnected">
            <summary>
            Returns a boolean value indicating if there is an active connection to the internet
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.FtpResult">
            <summary>
            The object containing the result of an FTP operation
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpResult.TransactionLog">
            <summary>
            A log of the transaction with the server
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpResult.Status">
            <summary>
            The status code
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpResult.StatusDescription">
            <summary>
            A description of the current status
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Extras.FtpResult.CommandResult">
            <summary>
            A string containing the result of a directory listing 
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.Ftp">
            <summary>
            Provides access to basic FTP commands
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Ftp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Extras.Ftp"/> class.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Ftp.GetDirectoryListing(WhiteCliff.WebZinc.Extras.FtpServer,System.String,System.String[]@)">
            <summary>
            Gets the raw directory listing as returned by the FTP server
            </summary>
            <param name="serverDetails"></param>
            <param name="remotePath"></param>
            <param name="dirListing"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Ftp.SendFile(WhiteCliff.WebZinc.Extras.FtpServer,System.String,System.String,System.Boolean)">
            <summary>
            Uploads a file to a remote path using the FTP protocol
            </summary>
            <param name="serverDetails">The <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to use when uploading the file.</param>
            <param name="uploadFile">The local path of the file to upload.</param>
            <param name="remotePath">The remote destination of the file to upload.</param>
            <param name="asciiMode"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Ftp.SendFile(WhiteCliff.WebZinc.Extras.FtpServer,System.String,System.String)">
            <summary>
            Uploads a file to a remote path using the FTP protocol
            </summary>
            <param name="serverDetails">The <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to use when uploading the file.</param>
            <param name="uploadFile">The local path of the file to upload.</param>
            <param name="remotePath">The remote destination of the file to upload.</param>
            <example>
            This sample uploads c:\myfile.txt to the "home" directory of the specified ftp server using
            the appropriate login details.
            <code lang="csharp">
            Ftp ftpObject = new Ftp();
            ftpObject.SendFile(new FtpServer("ftp.microsoft.com","myUsername","myPassword"),@"c:\myfile.txt","myfile.txt");
            </code>
            <code lang="vb">
            Dim ftpObject As New Ftp()
            ftpObject.SendFile(New FtpServer("ftp.microsoft.com","myUsername","myPassword"),"c:\myfile.txt","myfile.txt")
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Ftp.GetFile(WhiteCliff.WebZinc.Extras.FtpServer,System.String,System.String)">
            <summary>
            Downloads a file from the specified FTP server
            </summary>
            <param name="serverDetails">The <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to use</param>
            <param name="remotePath">The remote path of the file to download</param>
            <param name="downloadTo">The local path to save the file to</param>
            <returns></returns>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.SoundExType">
            <summary>
            An enumeration of available SoundEx algorithms
            </summary>
            <remarks>
            Used by the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.ComparableTo(System.String)"/> and <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.MatchTo(System.String)"/> functions.
            </remarks>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.SoundExType.SimplifiedSoundEx">
            <summary>
            The simplified soundex algoritm
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.SoundExType.SQLServerSoundEx">
            <summary>
            The SQL Server soundex algorithm
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.SoundExType.MiracodeSoundEx">
            <summary>
            The Miracode soundex algorithm
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.SoundExType.KnuthEd2SoundEx">
            <summary>
            The KnuthEd2 soundex algorithm
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.CaseType">
            <summary>
            An enumeration of case types
            </summary>
            <remarks>Used by the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.ChangeCase(WhiteCliff.WebZinc.Objects.CaseType)"/> function.</remarks>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.CaseType.ProperCase">
            <summary>
            Proper case (ie "Every Word Starts With A Capital")
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.CaseType.UpperCase">
            <summary>
            Upper case (ie "ALL LETTERS CAPITALISED")
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.CaseType.LowerCase">
            <summary>
            Lower case (ie "all letters lowercase")
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.CaseType.NewsHeadline">
            <summary>
            Newsheadline case (ie "Connecting Words are Lowercase")
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.TextProcessor">
            <summary>
            Provides text processing facilities.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.#ctor">
            <summary>
            Initializes a new instance of the TextProcessor class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextProcessor class
            </summary>
            <param name="initialValue">The initial value of this class</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.FullTrim">
            <summary>
            Performs a full 'trim' on the passed piece of text, removing all invisible 'white spaces', such as line feeds and other characters.
            </summary>
            <remarks>
            This function only trims the characters surrounding the real bulk of the text - no internal characters are altered.
            Characters with ASCII codes 0,8,9,10,13,32,160 are trimmed from the edges of the string.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.Contains(System.String)">
            <summary>
            Returns a boolean value indicating if the current string contains another.
            </summary>
            <param name="searchFor">The string to search for</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.ContainsWord(System.String)">
            <summary>
            Returns a boolean value indicating if the current string contains the specified word
            </summary>
            <param name="searchFor">The word to search for</param>
            <example>
            <code lang="csharp">
            // this will be true
            bool containsWordA = new TextProcessor("my string containing words").ContainsWord("containing");
            // this will be false
            bool containsWordB = new TextProcessor("my string containing words").ContainsWord("contain");
            </code>
            <code lang="vb">
            // this will be true
            Dim containsWordA As Boolean = New TextProcessor("my string containing words").ContainsWord("containing")
            // this will be false
            Dim containsWordA As Boolean = New TextProcessor("my string containing words").ContainsWord("contain")
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveText(System.String)">
            <summary>
            Removes the specified text from the current string
            </summary>
            <param name="removeText">The text to remove</param>
            <returns></returns>
            <example>
            The following example will output "my " to the debug window.
            <code lang="csharp">
            Debug.WriteLine (new TextProcessor("my sample string").Remove("sample string").Value);
            </code>
            <code lang="vb">
            Debug.WriteLine (New TextProcessor("my sample string").Remove("sample string").Value)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveTextBetween(System.String,System.String)">
            <summary>
            Removes text between two strings
            </summary>
            <param name="openTag"></param>
            <param name="closeTag"></param>
            <example>
            The following sample code removes the bracketed information from within a chunk of text.
            <code>
            MessageBox.Show (new TextProcessor("Washington (1/1/2001 - Associated Press) - The President made a speech today").RemoveTextBetween("(", ")").Value)
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveTextBetween(System.String,System.String,System.Boolean)">
            <summary>
            Removes text between two strings
            </summary>
            <param name="openTag">The opening 'tag' in the text</param>
            <param name="closeTag">The closing 'tag' in the text</param>
            <param name="snipTags">true if the tags should also be removed from the returned text</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveTextBetween(System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Removes the text between two tags.
            </summary>
            <param name="openTag">The opening 'tag' in the text</param>
            <param name="closeTag">The closing 'tag' in the text</param>
            <param name="snipTags">true if the tags should also be removed from the returned text</param>
            <param name="removedText">The text that has been removed</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBetween(System.String,System.String)">
            <summary>
            Removes text between two strings
            </summary>
            <param name="openTag"></param>
            <param name="closeTag"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBetween(System.String,System.String,System.Boolean)">
            <summary>
            Removes text between two strings
            </summary>
            <param name="openTag">The opening 'tag' in the text</param>
            <param name="closeTag">The closing 'tag' in the text</param>
            <param name="includeTags">true if the tags should also be removed from the returned text</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBetween(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Removes the text between two tags.
            </summary>
            <param name="openTag">The opening 'tag' in the text</param>
            <param name="closeTag">The closing 'tag' in the text</param>
            <param name="includeTags">true if the tags should also be removed from the returned text</param>
            <param name="instance">The instance of the openTag to start from</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBeforeWord(System.String)">
            <summary>
            Returns the text before a specific word
            </summary>
            <param name="word">The word to search for</param>
            <returns></returns>
            <example>
            The following sample code simply passes two chunks of text to the parser, telling it to cut the string at the word 'Report'. This is done and the resulting text returned.
            <code>
            MessageBox.Show(new TextProcessor("What could a decline in farming mean to a growing population? Report by John Berry.").GetTextBeforeWord("Report").Value)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBeforeWord(System.String,System.Int32)">
            <summary>
            Returns the text before a specific word
            </summary>
            <param name="word">The word to search for</param>
            <param name="wordInstance">The instance of the word at which to stop searching</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBeforeWord(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the text before a specific word
            </summary>
            <param name="word">The word to search for</param>
            <param name="wordInstance">The instance of the word at which to stop searching</param>
            <param name="includeWord">Specifies whether or not the passed word should be included in the returned text</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.CapitalisedWords">
            <summary>
            Returns the number of words that are title case within the current string
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.CapitalisedWords(System.Int32@)">
            <summary>
            Returns the number of words that are title case within the current string
            </summary>
            <param name="wordCount">When returned, will contain the total number of words in the current string</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextAfterWord(System.String)">
            <summary>
            Returns the text after a specified word.
            </summary>
            <param name="word">The word to search for</param>
            <example>
            The following sample code passes a chunk of news text and returns all text after the 'WASHINGTON -' tag.
            <code lang="vb">
            MessageBox.Show(new TextProcessor("WASHINGTON - The latest polls show that Nealoob Sasa is ahead in the run for president.").GetTextAfterWord("Washington -").Value)
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextAfterWord(System.String,System.Int32)">
            <summary>
            Returns the text after a specified word.
            </summary>
            <param name="word">The word to search for</param>
            <param name="wordInstance">The word at which the function should stop and return all text after it</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextAfterWord(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the text after a specified word.
            </summary>
            <param name="word">The word to search for</param>
            <param name="wordInstance">The word at which the function should stop and return all text after it</param>
            <param name="includeWord">Specifies whether or not the passed word should be included in the returned text</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.CutIntro">
            <summary>
             Strips redundant data from the beginning of a piece of text.
            </summary>
            <remarks>
            <para>This function identifies a piece of data as redundant if it 
             is within the number of specified characters and preceedes a dash 
             of some description.</para>
            <para>This function is regressive, meaning that if you instruct it
             to only remove data within the first 15 characters, it will check
             only that data. If it has to remove something from those first 
             fifteen characters, it starts again and checks the first 15 
             characters of the now-altered string. And so on.</para>
            </remarks>
            <example>
            This example would display a message box with the text 'Microsoft today unveiled plans for it's next version of Windows.'.
            <code lang="vb">
            Dim txtProcessor As New TextProcessor("1st Feb 2002 - (Reuters) - Microsoft today unveiled plans for it's next version of Windows.")
            MessageBox.Show (txtProcessor.CutIntro.ToString())
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.CutIntro(System.Int32)">
            <summary>
            Strips redundant data from the beginning of a piece of text.
            </summary>
            <param name="withinCharacters">The number of characters which any redundant data must be within</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveLines">
            <summary>
            Removes all lines in the passed text, reducing the text to one long string of text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.UrlEncode">
            <summary>
            Encodes a string for reliable HTTP transmission from the Web server to a client via the URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveLines(System.String)">
            <summary>
            Removes all lines in the passed text, replacing the lines with the specified string.
            </summary>
            <param name="replaceWith">The string that the new lines should be replaced with.</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.StripHTMLTags">
            <summary>
            Strips HTML tags and the contents of non-visible tags (such as script and select tags) from the text 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.LowerHeadlineWords">
            <summary>
            Used by the ConvertCase function - takes the passed Text and lowers all
            unimportant' 'connector' words, like 'in' and 'that'
            ALSO - Uses special cap checks to retain capitalisation on special words 
            - plus also checks and sorts "all caps" strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.ComparableTo(System.String)">
            <summary>
            Returns a value indicating if the current string is similar to another string.
            </summary>
            <param name="compareTo">The string to compare to</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.ComparableTo(System.String,WhiteCliff.WebZinc.Objects.SoundExType)">
            <summary>
            Returns a value indicating if the current string is similar to another string
            using the specified SoundEx algorithm.
            </summary>
            <param name="compareTo">The string to compare to</param>
            <param name="soundExType">The soundex algorithm to use</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.MatchTo(System.String)">
            <summary>
            Matches the current string to a word list
            </summary>
            <param name="words">A list of words seperated by spaces</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.MatchTo(System.String,WhiteCliff.WebZinc.Objects.SoundExType)">
            <summary>
            Returns the most appropriate category given a title
            </summary>
            <param name="words">A list of words seperated by spaces</param>
            <param name="soundExType">The type of soundex matching to use</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveExcessSpaces">
            <summary>
            Removes excess spaces from the given string
            </summary>
            <returns>The new string</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetSentences(System.Int32)">
            <summary>
            Returns the specified number of sentences in the text
            (treating '.' as the only sentence seperator)
            </summary>
            <param name="numOfSentences">The number of sentences to return</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetSentences(System.Char[],System.Int32)">
            <summary>
            Returns the specified number of sentences in the text
            </summary>
            <param name="splitChars">The characters to use as sentence seperators</param>
            <param name="numOfSentences">The number of sentences to return</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetFirstSentence">
            <summary>
            Returns the first sentence from the specified text
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetFirstSentence(System.Char[])">
            <summary>
            Returns the first sentence from the specified text using the specified characters as sentence seperators
            </summary>
            <param name="splitChars">The characters to use as sentence seperators</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveDates">
            <summary>
            Removes all dates from the specified string
            </summary>
            <returns>A string containing no dates</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.ChangeCase(WhiteCliff.WebZinc.Objects.CaseType)">
            <summary>
            Converts the case of the current string
            </summary>
            <param name="changeTo">The <see cref="T:WhiteCliff.WebZinc.Objects.CaseType"/> to change to</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.StartsWith(System.String)">
            <summary>
            Determines whether the beginning of this instance matches the specified String.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.EndsWith(System.String)">
            <summary>
            Determines whether the end of this instance matches the specified String.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.TextProcessor.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.TextProcessor.Value">
            <summary>
            The underlying string value of this TextProcessor object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Link">
            <summary>
            Represents a Hyperlink within a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Link.DetectJavaScriptLink">
            <summary>
            Attempts to parse out a JavaScript-opened link. Note this will only work if the file path is contained in the onclick/href property, rather than elsewhere.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Link.Click">
            <summary>
            Simulates a user clicking on this link
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Link.URL">
            <summary>
            Returns the URL of this link
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.SendKeys">
            <summary>
            Summary description for SendKeys.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.Reflection">
            <summary>
            Summary description for Reflection.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Reflection.EvaluateCommand(System.Object,System.String)">
            <summary>
            evaluates a statement such as "theObject.Items[0].Name" and returns the
            corresponding object
            </summary>
            <param name="obj">The object to evaluate the command on</param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Reflection.EvaluateProperty(System.Object,System.String)">
            <summary>
            Evaluate the value of a property given an object
            </summary>
            <param name="currentObject"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Reflection.EvaluateIndexer(System.Object,System.Object,System.Type)">
            <summary>
            Get the object returned by an indexed property
            </summary>
            <returns></returns>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.FtpServerCollection">
            <summary>
            A collection of <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> objects
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.FtpServerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Extras.FtpServerCollection"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.FtpServerCollection.Add(System.String,WhiteCliff.WebZinc.Extras.FtpServer)">
            <summary>
            Adds a <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to the current collection with an associated name.
            </summary>
            <param name="key">The key to associate with this <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object</param>
            <param name="server">The <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to add</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.FtpServerCollection.Add(WhiteCliff.WebZinc.Extras.FtpServer)">
            <summary>
            Adds a <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to the current collection
            </summary>
            <param name="server">The <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object to add</param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Extras.FtpServerCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Extras.FtpServerCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Extras.FtpServer"/> object with the specified key
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.TableRowCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.TableRow"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableRowCollection.FindByStartText(System.String)">
            <summary>
            Searches for a row starting with the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns>A row starting with the specified string</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableRowCollection.FindByText(System.String)">
            <summary>
            Searches for a row containg the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns>A row starting with the specified string</returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.TableRowCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.TableRow"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.NameObjectCollection">
            <summary>
            Basic implementation using the NameObjectCollectionBase class.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.PageObjectType">
            <summary>
            An enumeration of all the types of Page objects
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.All">
            <summary>
            Apply to all the page objects
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Page">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Page"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Link">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Link"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.LinkUrl">
            <summary>
            The Url of a <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Link"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Paragraph">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Paragraph"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Table">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Table"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.TableCell">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.TableCell"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.TableRow">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.TableRow"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Image">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Image"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Form">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Form"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.FormInputField">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.FormInputField"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.FormTextAreaField">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.FormTextAreaField"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.FormSelectField">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.FormSelectField"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Applet">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Applet"/> object
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.PageObjectType.Element">
            <summary>
            A <see cref="F:WhiteCliff.WebZinc.Objects.PageObjectType.Element"/> object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.FormCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Form"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormCollection.#ctor(WhiteCliff.WebZinc.MSHTML.IHTMLElementCollection,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            The constructor of the FormCollection object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating if an object with the specified key exists
            </summary>
            <param name="key">The key to search for</param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormCollection.Item(System.Int32)">
            <summary>
            Returns the Form object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormCollection.Item(System.String)">
            <summary>
            Returns the Form object with the specified key
            </summary>
            <example>
            Demonstrates how to fetch a form, and determine what URL
            it is set to post to.
            <code lang="csharp">
            Form myForm = myWebZincObject.CurrentPage.Forms["myForm"];
            MessageBox.Show("myForm will post to " + myForm.Action);
            </code>
            </example>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.AppletCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Applet"/> objects.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.AppletCollection.Item(System.Int32)">
            <summary>
            Returns an Applet object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.TemplateInfo">
            <summary>
            Represents information about a template
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.TemplateInfo.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.TemplateInfo"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.TemplateInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.TemplateInfo"/> class
            </summary>
            <param name="input">The input template</param>
            <param name="output">The file to output</param>
            <param name="inputXsl">true if the input template is an Xsl template rather than a WebZinc template</param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.TemplateInfo.Input">
            <summary>
            Specifies a template file to use with this page
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.TemplateInfo.Output">
            <summary>
            Specifies the destination of the processed file
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.TemplateInfo.InputXsl">
            <summary>
            A boolean value indicating if the input file is an XSL file or not.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.TableRow">
            <summary>
            Represents a row within a <see cref="T:WhiteCliff.WebZinc.Objects.Table"/> object.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.HtmlElementContainer">
            <summary>
            Represents a HTML element that can contain other elements
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.HtmlElementContainer.GetHtmlElements(System.String)">
            <summary>
            Gets a <see cref="T:WhiteCliff.WebZinc.Collections.HtmlElementCollection"/> of html elements matching the specified tag name
            </summary>
            <param name="tagName">The tag to grab</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.HtmlElementContainer.GetHtmlElements(System.String,System.String)">
            <summary>
            Gets a <see cref="T:WhiteCliff.WebZinc.Collections.HtmlElementCollection"/> of html elements matching the specified tag name and css class
            </summary>
            <param name="tagName">The tag to grab</param>
            <param name="className">The css class of the tags to grab</param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementContainer.Paragraphs">
            <summary>
            Returns a ParagraphCollection object with all the paragraphs within this object
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementContainer.Tables">
            <summary>
            Returns a TableCollection object with all the tables in this page
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementContainer.Links">
            <summary>
            Returns a LinkCollection object with all the hyperlinks on this page
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.HtmlElementContainer.Images">
            <summary>
            Returns a LinkCollection object with all the hyperlinks on this page
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.TableRow.RowIndex">
            <summary>
            Returns the position of this row within the table
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.TableRow.Cells">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Collections.TableCellCollection"/> object with all the rows in this page
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.TextProcFunction">
            <summary>
            An enumeration of text processing functions
            </summary>
            <remarks>
            Used by the <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> object.
            </remarks>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.FullTrim">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.FullTrim"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.RemoveText">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveText(System.String)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.RemoveTextBetween">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveTextBetween(System.String,System.String)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.GetTextBeforeWord">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextBeforeWord(System.String)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.GetTextAfterWord">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetTextAfterWord(System.String)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.CutIntro">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.CutIntro"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.RemoveLines">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveLines"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.StripHTMLTags">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.StripHTMLTags"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.MatchTo">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.MatchTo(System.String)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.RemoveExcessSpaces">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveExcessSpaces"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.GetSentences">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetSentences(System.Int32)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.GetFirstSentence">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.GetFirstSentence"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.ChangeCase">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.ChangeCase(WhiteCliff.WebZinc.Objects.CaseType)"/> function
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.TextProcFunction.RemoveDates">
            <summary>
            Execute the <see cref="M:WhiteCliff.WebZinc.Objects.TextProcessor.RemoveDates"/> function
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.RuleAction">
            <summary>
            Represents an action for a <see cref="T:WhiteCliff.WebZinc.Objects.Rule"/> to perform.
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleAction.FunctionName">
            <summary>
            The name of the function to apply.
            </summary>
            <remarks>
            This must be a member of the <see cref="T:WhiteCliff.WebZinc.Objects.TextProcessor"/> object.
            </remarks>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleAction.Parameters">
            <summary>
            The parameters to pass to the function.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.RuleAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.RuleAction.#ctor(WhiteCliff.WebZinc.Objects.TextProcFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> class
            </summary>
            <param name="functionName">The TextProcessing function to execute for this action</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.RuleAction.#ctor(WhiteCliff.WebZinc.Objects.TextProcFunction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> class
            </summary>
            <param name="functionName">The TextProcessing function to execute for this action</param>
            <param name="parameter">The parameter to pass the function</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.RuleAction.#ctor(WhiteCliff.WebZinc.Objects.TextProcFunction,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> class
            </summary>
            <param name="functionName">The TextProcessing function to execute for this action</param>
            <param name="parameters">The parameters to pass the function</param>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.HtmlElement">
            <summary>
            Represents any HTML element.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.Validation">
            <summary>
            Summary description for Validation.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.ElementObject">
            <summary>
            Represents a WebZinc object to be evaluated
            </summary>
            <remarks>
            This can be used to represent an object within WebZinc. <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> objects within
            this object can then evaluate multiple properties of this object
            </remarks>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.ElementBase">
            <summary>
            Represents an element of a page
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementBase"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementBase"/> class
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementBase.Name">
            <summary>
            The name to identify this Element object
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementBase.Property">
            <summary>
            Gets or sets the property to evaluate
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementObject.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementObject"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementObject.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementObject"/> class
            </summary>
            <param name="name">The name of this object</param>
            <param name="objectProperty">The property to evaluate</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementObject.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementObject"/> class
            </summary>
            <param name="name">The name of this object</param>
            <remarks>Should be used when manually populating an <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object</remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementObject.Elements">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.ElementCollection"/> object of <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> objects associated with this class
            </summary>
            <remarks>
            This elements should reference properties relative to this object
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementObject.Property">
            <summary>
            A C# expression referencing an object within the 
            WebZinc.CurrentPage object model
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.ElementGroupItem">
            <summary>
            Represents an item within a <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroup"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementGroupItem.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroupItem"/> class
            </summary>
            <remarks>
            You should only instantiate this object from your code when manually creating an
            <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementGroupItem.Elements">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.ElementCollection"/> of <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> objects associated with this item
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementGroupItem.Property">
            <summary>
            Not implemented in this class
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.SoundEx.SQLServerSoundEx">
            <summary>
            SQL Server only ignores adjacent duplicated phonetic sounds
            Plus, it doesn't ignore a character if it is duplicated with the leading char
            
            For example, SQL Server will encode "PPPP" as "P100", whereas Miracode will
            encode it as "P000".
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.HtmlElementCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.HtmlElement"/> objects.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.HtmlElementCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.HtmlElement"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.FormInputFieldCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.FormInputField"/> objects
            </summary>
            <remarks>
            This collection contains all the &lt;input tags within a &lt;form tag.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormInputFieldCollection.#ctor(WhiteCliff.WebZinc.MSHTML.IHTMLElementCollection,WhiteCliff.WebZinc.Objects.Form,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            The constructor of the <see cref="T:WhiteCliff.WebZinc.Collections.FormInputFieldCollection"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormInputFieldCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating if an object with the specified key exists
            </summary>
            <param name="key">The key to search for</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormInputFieldCollection.FindByValue(System.String,System.String)">
            <summary>
            Finds an input field by its value
            </summary>
            <example>
            If you have a group of option boxes, called "optSubscribe" with values "Yes" and "No", to
            select the Yes radio button, simply do
            <code lang="vb">
            myWebZincObject.Forms(0).InputFields.FindByValue("optSubscribe","Yes").Checked = True
            </code>
            </example>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormInputFieldCollection.Elements(System.String)">
            <summary>
            Returns a collection of elements with the same key
            </summary>
            <param name="key"></param>
            <returns></returns>
            <example>
            <code lang="vb">
            ' fetches all elements with the identifier "SomeButton"
            Dim buttons As FormInputFieldCollection = myWZObject.CurrentPage.Forms[0].Elements("SomeButton")
            ' submits the second element with identifier "SomeButton"
            buttons[1].Submit()
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormInputFieldCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.FormInputField"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormInputFieldCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.FormInputField"/> object with the specified key
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Paragraph">
            <summary>
            Represents a Paragraph on a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object.
            </summary>
            <remarks>Objects of this type are stored in a <see cref="T:WhiteCliff.WebZinc.Collections.ParagraphCollection"/> object. See the documentation there for definitions of how paragraphs are defined.</remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Paragraph.GetParagraphAfter">
            <summary>
            Gets the paragraph after this one, ignoring any paragraphs 
            that are less than 10 characters long
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Paragraph.GetParagraphAfter(System.Int32)">
            <summary>
            Gets the paragraph after this one, ignoring any paragraphs 
            that are less than the specified number of characters long.
            </summary>
            <param name="minParagraphLength">The minimum paragraph length</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Paragraph.GetParagraphBefore">
            <summary>
            Gets the paragraph before this one, ignoring any paragraphs 
            that are less than 10 characters long
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Paragraph.GetParagraphBefore(System.Int32)">
            <summary>
            Gets the paragraph before this one, ignoring any paragraphs 
            that are less than the specified number of characters long.
            </summary>
            <param name="minParagraphLength">The minimum paragraph length</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Paragraph.ToString">
            <summary>
            Converts the paragraph to a String object
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Paragraph.Link">
            <summary>
            Returns the first <see cref="P:WhiteCliff.WebZinc.Objects.Paragraph.Link"/> for this paragraph
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Paragraph.Links">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Collections.LinkCollection"/> object with all the hyperlinks in this paragraph
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Paragraph.Images">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Collections.ImageCollection"/> object with all the images in this paragraph
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Paragraph.Text">
            <summary>
            Returns the text for this paragraph
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.Win32">
            <summary>
            Summary description for Win32.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.SoundEx.SimplifiedSoundEx">
            <summary>
            Simplified SoundEx is described in Knuth vol3 Edition 1
            This is different to the algorithm described in Knuth vol3 Edition 2
            
            It was used for the 1880 and 1900 census
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.RuleCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Rule"/> objects.
            </summary>
            <example>
            The sample below demonstrates creating a new rule that removes all Paragraphs containing the text "advertisement":
            <code lang="vb">
            ' create the rule
            Dim myRule As New Rule(PageObjectType.Paragraph, RuleCondition.ContainsWord, "advertisement", true)
            ' add the rule to the collection
            MyWebZinc.Rules.Add(myRule)
            </code>
            </example>
            <example>
            Demonstrates how to change the case of all the paragraphs
            <code lang="vb">
            ' create a new rule object
            Dim myRule As New Rule
            ' create a new rule action that calls the ChangeCase function with
            ' CaseType.NewsHeadline as the first parameter
            Dim myRuleAction As New RuleAction(TextProcFunction.ChangeCase, CaseType.NewsHeadline)
            myRule.AppliesTo = PageObjectType.Paragraph
            myRule.Actions.Add (myRuleAction)
            ' this should reference the appropriate WebZinc object
            myWebZincObject.Rules.Add(myRule)</code>
            </example>
            <example>
            You can persist these collections in XML
            <code lang="vb">
            ' save the rules collection
            myWebZincObject.Rules.Save("c:\myRules.xml")
            ' load the rules again
            myWebZincObject.Rules = WhiteCliff.Collections.RuleCollection.Load("c:\myRules.xml")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Collections.RuleCollection"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleCollection.Add(WhiteCliff.WebZinc.Objects.Rule)">
            <summary>
            Adds a <see cref="T:WhiteCliff.WebZinc.Objects.Rule"/> object to the collection
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleCollection.Process(WhiteCliff.WebZinc.Objects.Page,System.String,WhiteCliff.WebZinc.Objects.PageObjectType,System.Boolean)">
            <summary>
            Processes the all the rules in the Rules collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleCollection.Save(System.String)">
            <summary>
            Saves the current collection to the specified file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleCollection.Load(System.String)">
            <summary>
            Loads a <see cref="T:WhiteCliff.WebZinc.Collections.RuleCollection"/> object from the specified file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.RuleCollection.SplitParagraphsUsing">
            <summary>
            The text to split up the paragraphs with.
            </summary>
            <remarks>
            In most situations, this should be left to its default value of a newline character
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.RuleCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.Rule"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.RuleCollection.ApplyRules">
            <summary>
            Gets or sets a value indicating whether to apply the rules in this collection
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.RuleCollection.MinimumParagraphLength">
            <summary>
            Gets or sets a value for the minimum paragraph length
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.ResponseDescription">
            <summary>
            A response description object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.FtpWebResponse">
            <summary>
            Implementation of the FTP protocol using the WebResponse object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.Reflect">
            <summary>
            Provides reflection utility functions
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Reflect.EvaluateCommand(System.Object,System.String)">
            <summary>
            Evaluates a command
            </summary>
            <param name="applyTo"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.Reflect.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a property
            </summary>
            <param name="applyTo"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.TableCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Table"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCollection.#ctor(WhiteCliff.WebZinc.MSHTML.IHTMLElementCollection,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Collections.TableCollection"/> class.
            Intended for internal use only.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCollection.FindByStartText(System.String)">
            <summary>
            Searches for a table starting with the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCollection.FindByStartText(System.String,System.Int32)">
            <summary>
            Searches for a table starting with the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns>A table starting with the specified string</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCollection.FindByText(System.String)">
            <summary>
            Searches for a table starting with the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns>A table starting with the specified string</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCollection.FindByText(System.String,System.Int32)">
            <summary>
            Searches for a table starting with the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <param name="instance">The instance of the table to return</param>
            <returns>A table starting with the specified string</returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.TableCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.Table"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser">
            <summary>
            Provides a control which can be hosted in another form in order to display a
            customized browser window.
            </summary>
            <remarks>
            You must be using the WebZincUI class in order to use this control. If the user 
            clicks on a link, or triggers another navigation event, you will be notified by
            the <see cref="E:WhiteCliff.WebZinc.WebZincUI.OnDocumentChange"/> event.
            </remarks>
            <example>
            Demonstrates how to "attach" an instance of this control to a WebZincUI class.
            <code lang="csharp">
            // create a new WebZincUI object
            WebZincUI webZinc = new WebZincUI();
            // attach to the WebZincBrowser object on the current form
            webZinc.SetBrowserControl(myWebZincBrowserObject);
            // now open a website and display the result in the control
            webZinc.OpenPage("http://www.google.com/");
            </code>
            <code lang="vb">
            ' create a new WebZincUI object
            Dim webZinc As New WebZincUI
            ' attach to the WebZincBrowser object on the current form
            webZinc.SetBrowserControl(myWebZincBrowserObject)
            ' now open a website and display the result in the control
            webZinc.OpenPage("http://www.google.com/")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser.GetSafeBrowserhWnd">
            <summary>
            Gets the "real" hWnd of the browser window
            </summary>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.WebBrowser.WebZincBrowser.AllowRedraw">
            <summary>
            If set to false, the web browser contents is not displayed. 
            </summary>
            <remarks>If you are using the <see cref="M:WhiteCliff.WebZinc.Objects.HtmlElementBase.PromoteToBody"/> method of an element, you can use this to prevent the web page being displayed until you have made the necessary calls.</remarks>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.TextProcessing">
            <summary>
            Summary description for TextProcessing.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.TextProcessing.StripHTMLTags(System.String)">
            <summary>
            This function removes HTML tags, plus the contents of specific ones
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.SoundEx.MiracodeSoundEx">
            <summary>
            Implements American SoundEx or Miracode algorithm according 
            to http://www.nara.gov/genealogy/soundex/soundex.html
            Miracode was first used with the 1910 US census
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.Element">
            <summary>
            Represents an element of a page
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.Element.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> class
            </summary>
            <param name="name">The name of the element</param>
            <param name="property">The property to evaluate</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.Element.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> class
            </summary>
            <remarks>Use this constructor when manually entering the values of a <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object</remarks>
            <param name="name">The name of the element</param>
            <param name="value">The value of the element</param>
            <param name="setValue">Should be set to true</param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.Element.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <remarks>
            Will return null until the PageGrab object has been processed
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.Element.Property">
            <summary>
            A C# expression referencing a string within the 
            WebZinc.CurrentPage object model
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.#ctor(WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="uiBrowser"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.#ctor(WhiteCliff.WebZinc.WebBrowser.Ole.IOleObject,System.Boolean,WhiteCliff.WebZinc.WebBrowserOptions)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="uiBrowser"></param>
            <param name="options"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.SetOptions(WhiteCliff.WebZinc.WebBrowserOptions)">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.AmbientDlControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.GetContainer(System.Object@)">
            <summary>
            
            </summary>
            <param name="ppContainer"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.GetMoniker(System.UInt32,System.UInt32,System.Object@)">
            <summary>
            
            </summary>
            <param name="dwAssign"></param>
            <param name="dwWhichMoniker"></param>
            <param name="ppmk"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.OnShowWindow(System.Boolean)">
            <summary>
            
            </summary>
            <param name="fShow"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.RequestNewObjectLayout">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.SaveObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.WebBrowser.ClientSiteWrapper.ShowObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Trials.WebZincTrialService">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.#ctor">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.CheckTrial(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.BeginCheckTrial(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.EndCheckTrial(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.CheckTrialAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.CheckTrialAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.ResetTrial(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.BeginResetTrial(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.EndResetTrial(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.ResetTrialAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.ResetTrialAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:WhiteCliff.WebZinc.Trials.WebZincTrialService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:WhiteCliff.WebZinc.Trials.WebZincTrialService.CheckTrialCompleted">
            <remarks/>
        </member>
        <member name="E:WhiteCliff.WebZinc.Trials.WebZincTrialService.ResetTrialCompleted">
            <remarks/>
        </member>
        <member name="T:WhiteCliff.WebZinc.Trials.CheckTrialCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WhiteCliff.WebZinc.Trials.CheckTrialCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WhiteCliff.WebZinc.Trials.CheckTrialCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WhiteCliff.WebZinc.Trials.ResetTrialCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:WhiteCliff.WebZinc.Trials.ResetTrialCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:WhiteCliff.WebZinc.Trials.ResetTrialCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.TableCell">
            <summary>
            Represents a cell within a <see cref="T:WhiteCliff.WebZinc.Objects.TableRow"/> object.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.ParagraphCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Paragraph"/> objects.
            </summary>
            <remarks>
              <para>Paragraphs are divided up using a newline character (or a custom string set in the <see cref="P:WhiteCliff.WebZinc.Collections.RuleCollection.SplitParagraphsUsing"/> parameter. </para>
              <para>Any paragraphs that are smaller than the <see cref="P:WhiteCliff.WebZinc.Collections.RuleCollection.MinimumParagraphLength"/> property are excluded from this collection. You can still access the paragraphs smaller than this length through the <see cref="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphBefore(System.Int32,System.Int32)"/> and <see cref="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphAfter(System.Int32,System.Int32)"/> functions.</para>
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.#ctor(WhiteCliff.WebZinc.Objects.HtmlElementContainer,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            Standard constructor for the Paragraph Collection object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindFirstBodyParagraph">
            <summary>
            Searches for the first paragraph that looks like a body of text.
            </summary>
            <remarks>
            This method attempts to find the first body paragraph
            </remarks>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            Dim Para As Paragraph = WZ.CurrentPage.Paragraphs.FindFirstBodyParagraph()
            MessageBox.Show(Para.Text)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindFirstBodyParagraphIndex">
            <summary>
            Returns the index of the first paragraph that looks like a body of text
            </summary>
            <remarks>
            </remarks>
            <returns>-1 if a body paragraph is not found, otherwise the index of the paragraph.</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindByStartText(System.String)">
            <summary>
            Returns a paragraph starting with the specified string (case insensitive)
            </summary>
            <param name="searchFor">The string to search for</param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the first paragraph starting with the text Partners
            ' according to the MinimumParagraphLength that we have set
            WZ.Rules.MinimumParagraphLength = 15
            WZ.CurrentPage.Paragraphs.FindByStartText("Partners")
            </code>
            </example>
            <remarks>Only searches paragraphs above <see cref="P:WhiteCliff.WebZinc.Collections.RuleCollection.MinimumParagraphLength"/></remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindByStartText(System.String,System.Int32)">
            <summary>
            Returns a paragraph starting with the specified string (case insensitive)
            </summary>
            <param name="searchFor">The string to search for</param>
            <param name="minParagraphLength">The minimum paragraph length to include</param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the first paragraph starting with the text Partners
            WZ.CurrentPage.Paragraphs.FindByStartText("Partners",15)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindByText(System.String)">
            <summary>
            Returns a paragraph containing the specified string (case insensitive)
            </summary>
            <param name="searchFor"></param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the first paragraph containing the string "My Keyword"
            WZ.CurrentPage.Paragraphs.FindByText("My Keyword")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindByText(System.String,System.Int32)">
            <summary>
            Returns a paragraph containing the specified string (case insensitive)
            </summary>
            <param name="searchFor">The string to search for</param>
            <param name="instance">The instance of the string</param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the *second* paragraph containing the string "My Keyword"
            WZ.CurrentPage.Paragraphs.FindByText("My Keyword",2)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.FindByText(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a paragraph containing the specified string (case insensitive)
            </summary>
            <param name="searchFor">The string to search for</param>
            <param name="minParagraphLength">The minimum paragraph length to include</param>
            <param name="instance">The instance of the string</param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the first paragraph containing the string "My Keyword"
            ' only counting paragraphs over 15 characters in length
            WZ.CurrentPage.Paragraphs.FindByText("My Keyword",1,15)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphAfterString(System.String)">
            <summary>
            Returns the first paragraph after the specified search string
            </summary>
            <param name="searchFor">The string to search for</param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the paragraph containing the string "My Keyword"
            ' and returns the one after it
            WZ.CurrentPage.Paragraphs.GetParagraphAfterString("My Keyword")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphAfterString(System.String,System.Int32)">
            <summary>
            Returns the first paragraph after the specified search string
            </summary>
            <param name="searchFor">The string to search for</param>
            <param name="stringInstance">The instance of the string to search for</param>
            <returns></returns>
            <example>
            <code lang="vb">
            Dim WZ As WebZinc = New WebZinc("http://www.someurl.com/")
            ' finds the *second* paragraph containing the string "My Keyword"
            ' and returns the one after it
            WZ.CurrentPage.Paragraphs.GetParagraphAfterString("My Keyword",2)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphAfterString(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="searchFor"></param>
            <param name="stringInstance">The instance of the string to search for</param>
            <param name="paragraphNumber">The position of the paragraph after the search string to return.</param>
            <param name="minParagraphLength">The minimum paragraph length to include</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphBefore(System.Int32,System.Int32)">
            <summary>
            Returns a paragaph before the current one, given the current original position
            and the minimum paragraph length
            </summary>
            <param name="originalPosition">The index of the current paragraph in the _originalParagraphs collection</param>
            <param name="minParagraphLength"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.GetParagraphAfter(System.Int32,System.Int32)">
            <summary>
            Returns a paragaph after the current one, given the current original position
            and the minimum paragraph length
            </summary>
            <param name="originalPosition">The index of the current paragraph in the _originalParagraphs collection</param>
            <param name="minParagraphLength"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ParagraphCollection.ParseParagraphs">
            <summary>
            Parses the paragraphs using the current rules collection
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.ParagraphCollection.Count">
            <summary>
            Returns the number of <see cref="T:WhiteCliff.WebZinc.Objects.Paragraph"/> objects in this collection
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.ParagraphCollection.Item(System.Int32)">
            <summary>
            Returns the specified paragraph text
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.ElementGroup">
            <summary>
            Represents a group of <see cref="T:WhiteCliff.WebZinc.Xml.Element"/> objects
            </summary>
            <remarks>
            When the associated <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object is processed, this
            group will be populated with the appropriate <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroupItem"/> objects.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementGroup.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroup"/> object
            </summary>
            <remarks>
            Should be used when manually populating a <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementGroup.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroup"/> object
            </summary>
            <remarks>
            Should be used when manually populating a <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object
            </remarks>
            <param name="name">The name to associate with this group</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementGroup.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroup"/> object
            </summary>
            <param name="name">The name of this group</param>
            <param name="indexedProperty">The indexed property that should be enumerated</param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementGroup.Elements">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.ElementCollection"/> object associated with this class
            </summary>
            <remarks>
            This will contain <see cref="T:WhiteCliff.WebZinc.Xml.ElementGroupItem"/> objects once processed
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementGroup.LoopFrom">
            <summary>
            Specifies the (0-based) position in the indexed object to loop from
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementGroup.LoopTo">
            <summary>
            Specifies the position in the indexed object to loop to. 
            A negative value will loop to the number of items in
            the object minus the LoopTo value
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementGroup.Property">
            <summary>
            A C# expression referencing an indexed property within the 
            WebZinc.CurrentPage object model
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Form">
            <summary>
            Represents a Html form
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Form.Submit">
            <summary>
            Submits the form
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Form.SaveSubmitResult(System.String)">
            <summary>
            Submits the form
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Form.GetSubmitResult">
            <summary>
            Gets a WebResponse object for submitting this form
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.InputFields">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Collections.FormInputFieldCollection"/> associated with this form.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.TextAreaFields">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Collections.FormTextAreaFieldCollection"/> associated with this form
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.SelectFields">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Collections.FormSelectFieldCollection"/> associated with this form
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.Action">
            <summary>
            The URL the form is posted to
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.Name">
            <summary>
            The name of this form
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.Target">
            <summary>
            The target frame of this form
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.Method">
            <summary>
            The form submission method. Usually POST or GET
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Form.Encoding">
            <summary>
            Returns the encoding that this form will use when submitted
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.PageRequestBuilder">
            <summary>
            Summary description for RequestBuilder
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.PageRequestBuilder.AddPostKey(System.String,System.Byte[])">
            <summary>
            Adds POST form variables to the request buffer.
            HttpPostMode determines how parms are handled.
            1 - UrlEncoded Form Variables. Uses key and value pairs (ie. "Name","Rick") to create URLEncoded content
            2 - Multi-Part Forms - not supported
            4 - XML block - Post a single XML block. Pass in as Key (1st Parm)
            other - raw content buffer. Just assign to Key.
            </summary>
            <param name="Key">Key value or raw buffer depending on post type</param>
            <param name="Value">Value to store. Used only in key/value pair modes</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.PageRequestBuilder.AddPostKey(System.String)">
            <summary>
            Adds a fully self contained POST buffer to the request.
            Works for XML or previously encoded content.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Internal.PageRequestBuilder.PostMode">
            <summary>
            Determines how data is POSTed when cPostBuffer is set.
            1 - UrlEncoded
            2 - Multi-Part form vars
            4 - XML (raw buffer content type: text/xml)
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Internal.PageRequestBuilder.UsePOST">
            <summary>
            A boolean value indicating whether to POST the data
            </summary>
            <remarks>if false, the GET method is used</remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Internal.PageRequestBuilder.Settings">
            <summary>
            The settings object
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.FrameCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FrameCollection.#ctor(WhiteCliff.WebZinc.MSHTML.IHTMLElementCollection,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            Initializes a Frame collection using "live" data
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FrameCollection.FindMainFrame">
            <summary>
            Attempts to identify the main frame on in the current page
            </summary>
            <returns></returns>
            <example>
            <code lang="csharp">
            WebZinc wz = new WebZinc();
            // tell webzinc we want to load inner frame pages
            wz.Settings.BrowserOptions.LoadFrames = true;
            // load the page
            Page page = wz.OpenPage("http://www.somepage.com/");
            // fetch the text of the main frame page
            MessageBox.Show(page.Frames.FindMainFrame().Text);
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FrameCollection.Count">
            <summary>
            Returns the number of <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> objects in this collection
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FrameCollection.Item(System.String)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object with the specified name
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FrameCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.FormTextAreaFieldCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.FormTextAreaField"/> objects.
            </summary>
            <remarks>
            This collection contains all the &lt;textarea tags within a &lt;form tag.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormTextAreaFieldCollection.#ctor(WhiteCliff.WebZinc.MSHTML.IHTMLElementCollection,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            The constructor of the FormTextAreaFieldCollection object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormTextAreaFieldCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating if an object with the specified key exists
            </summary>
            <param name="key">The key to search for</param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormTextAreaFieldCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.FormTextAreaField"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormTextAreaFieldCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.FormTextAreaField"/> object with the specified key
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.FormOptionFieldCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.FormOptionField"/> objects.
            </summary>
            <remarks>
            This collection contains all the &lt;option tags within a &lt;select tag.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormOptionFieldCollection.#ctor(WhiteCliff.WebZinc.MSHTML.IHTMLElementCollection,WhiteCliff.WebZinc.Objects.Page)">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Collections.FormOptionFieldCollection"/> class.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.FormOptionFieldCollection.FindByText(System.String)">
            <summary>
            Returns the FormOptionField with the specified text.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <example>
            <code lang="vb">
            ' gets the first form on the page
            Dim myForm As Form = wz.CurrentPage.Forms(0)
            ' gets the someSelection object
            Dim mySelection As FormSelectField = myForm.SelectFields("someSelection")
            ' selects "selectionA"
            mySelection.Options.FindByText("selectionA").Selected = True
            </code>
            <code lang="csharp">
            // gets the first form on the page
            Form myForm = wz.CurrentPage.Forms[0];
            // gets the someSelection object
            FormSelectField mySelection = myForm.SelectFields["someSelection"];
            // selects "selectionA"
            mySelection.Options.FindByText("selectionA").Selected = true;
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.FormOptionFieldCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.FormOptionField"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Table">
            <summary>
            Represents a Html table on a <see cref="T:WhiteCliff.WebZinc.Objects.Page"/> object.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Table.Rows">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Collections.TableRowCollection"/> object with all the frames in this page
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Page">
            <summary>
            Represents a Html page.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.Dispose">
            <summary>
            Releases resources used by this object immediately
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.GetMetaRedirect">
            <summary>
            Searches for a meta redirect tag in the current document
            </summary>
            <returns>The url to redirect to, if it exists, or String.Empty if it does not.</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.Save(System.String)">
            <summary>
            Saves the current document to a file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.EvaluateCommand(System.String)">
            <summary>
            Evaluates C# code on the current page object
            </summary>
            <param name="command"></param>
            <example>
            The following example would output the text in the first paragraph
            of the second table twice.
            <code>
            Debug.Write (myPageObject.EvaluateCommand("Tables[1].Paragraphs[0].Text").ToString())
            Debug.Write (myPageObject.Tables[1].Paragraphs[0].Text)
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.GetHeadElements(System.String)">
            <summary>
            Gets a <see cref="T:WhiteCliff.WebZinc.Collections.HtmlElementCollection"/> of html elements within the &lt;head&gt; tag matching the specified tag name
            </summary>
            <param name="tagName">The tag to grab</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.RunScript(System.String)">
            <summary>
            Executes the specified function or JavaScript on the current page
            </summary>
            <param name="scriptContents">The JavaScript or function to execute</param>
            <example>
            Demonstrates how to display a JavaScript alert dialog box
            <code lang="vb">
            ' set the allow script flag
            myWebZincObject.Settings.BrowserOptions.AllowJavaScript = True
            ' open the page
            myWebZincObject.OpenPage("http://www.google.com/")
            ' run some script
            myWebZincObject.CurrentPage.RunScript("alert('hello!)")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.RunScript(System.String,System.String)">
            <summary>
            Executes the specified code or function on the current page
            </summary>
            <param name="scriptContents">The code or function to execute</param>
            <param name="scriptLanguage">The scriptiing language of the code (usually VBScript or JavaScript)</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.SendKey(WhiteCliff.WebZinc.Objects.SystemKey)">
            <summary>
            Sends a system key to the control in the browser window with the focus.
            </summary>
            <param name="key"></param>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Page.SendText(System.String)">
            <summary>
            Sends a series of characters to the current page
            </summary>
            <param name="text"></param>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.Title">
            <summary>
            Returns the title of the page
            </summary>
            <example>
            <code lang="vb">
            MessageBox.Show(myWebZincObject.CurrentPage.Title)
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.PageUri">
            <summary>
            Returns a Uri object representing the page's URL
            </summary>
            <example>
            Demonstrates how to get the filename of the current page
            <code lang="vb">
            // get the segments of the url
            string[] urlSegments = myWebZincObject.CurrentPage.PageUri.Segments
            MessageBox.Show(urlSegments[urlSegments.GetUpperBound(0)])
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.Url">
            <summary>
            Returns the page's URL
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.LastModified">
            <summary>
            Returns the date this page was last modified
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.Html">
            <summary>
            Returns the HTML code behind this page after being parsed
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.RawHtml">
            <summary>
            Returns the raw non-parsed HTML code behind this page
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.Frames">
            <summary>
            Returns a FrameCollection object with all the frames in this page
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">Thrown if this collection is not available in the current WebZinc object (due to webZinc.Settings.BrowserOptions.LoadFrames being set to false).</exception>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.Forms">
            <summary>
            Returns a FormCollection object with all the forms in this page
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Page.Applets">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Collections.AppletCollection"/> object with all the applets in this page
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">Thrown if this collection is not available in the current WebZinc object.</exception>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Encryption.#ctor">
            <remarks>
            Default Constructor (uses Rijndael by default)
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Encryption.#ctor(WhiteCliff.WebZinc.Internal.Encryption.SymmProvEnum)">
            <remarks>
            Constructor for using an intrinsic .Net SymmetricAlgorithm class.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Encryption.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <remarks>
            Constructor for using a customized SymmetricAlgorithm class.
            </remarks>
        </member>
        <member name="M:WhiteCliff.WebZinc.Internal.Encryption.GetLegalKey(System.String)">
            <remarks>
            Depending on the legal key size limitations of a specific CryptoService provider
            and length of the private key provided, padding the secret key with space character
            to meet the legal size of the algorithm.
            </remarks>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.Encryption.SymmProvEnum">
            <remarks>
            Supported .Net intrinsic SymmetricAlgorithm classes.
            </remarks>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.ElementCollection">
            <summary>
            Contains a collection of objects inheriting <see cref="T:WhiteCliff.WebZinc.Xml.ElementBase"/>
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.ElementCollection"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementCollection.Add(WhiteCliff.WebZinc.Xml.ElementBase)">
            <summary>
            Adds a new element to the collection
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.ElementCollection.GetAllValues">
            <summary>
            Gets an array of <see cref="T:WhiteCliff.WebZinc.Xml.ElementBase"/> objects in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Xml.ElementBase"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.ElementCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Xml.ElementBase"/> object with the specified name
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.AutoZinc">
            <summary>
            Provides support for automating WebZinc using an XML serialized
            version of this class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.#ctor">
            <summary>
            Creates a new AutoZinc object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.Save(System.String)">
            <summary>
            Saves the AutoZinc object to an XML file
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.EvaluateCommand(System.String)">
            <summary>
            Evaluates a C# command on the current object
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.Load(System.String)">
            <summary>
            Loads a <see cref="T:WhiteCliff.WebZinc.WebZinc"/> object from the specified file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.Process(WhiteCliff.WebZinc.IWebZincBase,System.String)">
            <summary>
            Processes the AutoZinc object using the specified WebZinc object
            </summary>
            <param name="webZinc"></param>
            <param name="activePath">The current path to use when looking for template files</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.Process(WhiteCliff.WebZinc.IWebZincBase,System.String,System.Boolean,System.Boolean)">
            <summary>
            Processes the AutoZinc object using the specified WebZinc object
            </summary>
            <param name="webZinc"></param>
            <param name="activePath">The current path to use when looking for template files</param>
            <param name="processTemplates">false to ignore template processing commands</param>
            <param name="processFtp">false to ignore FTP processing commands</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.Process(WhiteCliff.WebZinc.IWebZincBase)">
            <summary>
            Processes the AutoZinc object using the specified WebZinc object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.AutoZinc.ProcessElements(WhiteCliff.WebZinc.Xml.ElementCollection,WhiteCliff.WebZinc.Xml.ElementCollection,System.Object)">
            <summary>
            
            </summary>
            <param name="outputElements"></param>
            <param name="inputElements"></param>
            <param name="currentObject"></param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.AutoZinc.Pages">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.PageCollection"/> object associated with this class
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.AutoZinc.Servers">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Extras.FtpServerCollection"/> object associated with this class
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.TableCellCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.TableCell"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCellCollection.FindByStartText(System.String)">
            <summary>
            Searches for a cell starting with the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns>A cell starting with the specified string</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.TableCellCollection.FindByText(System.String)">
            <summary>
            Searches for a cell containg the specified text
            </summary>
            <param name="searchString">The text to search for</param>
            <returns>A cell starting with the specified string</returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.TableCellCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:WhiteCliff.WebZinc.Objects.TableCell"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.SystemKey">
            <summary>
            An enumeration of the possible system keys to send to an applet
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.SystemKey.Tab">
            <summary>
            The tab key
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.SystemKey.Enter">
            <summary>
            The enter key
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Applet">
            <summary>
            Represents a Java applet or other embedded object in a web page
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Applet.SendText(System.String)">
            <summary>
            Sends a series of characters to the applet
            </summary>
            <param name="text">The text to send</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Applet.SendKey(WhiteCliff.WebZinc.Objects.SystemKey)">
            <summary>
            Sends a system key to the applet
            </summary>
            <param name="key">The <see cref="T:WhiteCliff.WebZinc.Objects.SystemKey"/> to send.</param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Dialogs.DefaultBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Dialogs.DefaultBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.RuleActionCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleActionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Collections.RuleActionCollection"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.RuleActionCollection.Add(WhiteCliff.WebZinc.Objects.RuleAction)">
            <summary>
            Adds a <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> object to the collection
            </summary>
            <param name="ruleAction"></param>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.RuleActionCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.LinkCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Link"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.LinkCollection.ParseLinks">
            <summary>
            Parses the paragraphs using the current rules collection
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.LinkCollection.FindByText(System.String)">
            <summary>
            Searches for a link with the specified text
            </summary>
            <param name="linkText">The text to search for</param>
            <returns>A link with the specified text, null if no matching item is found.</returns>
            <example>
            <code lang="csharp">
            // open a new page
            WebZinc wz = new WebZinc("http://www.someurl.com/");
            // fetch the first link with the text "Contact Us"
            Link link = wz.CurrentPage.Links.FindByText("Contact Us");
            // go there
            wz.OpenPage(link.URL);
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.LinkCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.Link"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Xml.PageCollection">
            <summary>
            A collection of <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> objects
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Xml.PageCollection"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageCollection.Add(WhiteCliff.WebZinc.Xml.PageGrab)">
            <summary>
            Adds a new <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object to this collection
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Xml.PageCollection.GetAllValues">
            <summary>
            Gets an array of <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> objects for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object at the specified index
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Xml.PageCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:WhiteCliff.WebZinc.Xml.PageGrab"/> object with the specified key
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.FormInputFieldType">
            <summary>
            The enumeration of different form input field types
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Unsupported">
            <summary>
            The input field type is not supported
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Button">
            <summary>
            A button
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.CheckBox">
            <summary>
            A checkbox field
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.File">
            <summary>
            A file upload field
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Hidden">
            <summary>
            A hidden field
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Image">
            <summary>
            An image field
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Password">
            <summary>
            A password input field
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Radio">
            <summary>
            A radio button field
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Reset">
            <summary>
            A reset button
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Submit">
            <summary>
            A submit button
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.FormInputFieldType.Text">
            <summary>
            A text input field
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.FormInputField">
            <summary>
            Represents an input field in a <see cref="T:WhiteCliff.WebZinc.Objects.Form"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.FormInputField.Click">
            <summary>
            Simulates a user clicking the input field
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.FormInputField.Submit">
            <summary>
            Submits the current form using the current object
            </summary>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormInputField.Value">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormInputField.Name">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormInputField.Checked">
            <summary>
            Returns if the input field is checked or not
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormInputField.FieldType">
            <summary>
            The type of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormInputField.LabelText">
            <summary>
            Attempts to determine the "label" associated with this field
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Internal.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Collections.ImageCollection">
            <summary>
            Contains a collection of <see cref="T:WhiteCliff.WebZinc.Objects.Image"/> objects.
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ImageCollection.FindByURL(System.String)">
            <summary>
            Searches the collection for an image linking to the specified URL
            </summary>
            <param name="url">The linking URL to search for</param>
            <returns>The image object</returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ImageCollection.FindByDimensions(System.Int32,System.Int32)">
            <summary>
            Returns the first image in the collection with the specified dimensions
            </summary>
            <param name="width">The width of the image in pixels</param>
            <param name="height">The height of the image in pixels</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ImageCollection.FindByAltText(System.String)">
            <summary>
            Searches for text with the specified alternative text
            </summary>
            <param name="altText"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ImageCollection.FindByDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the specified instance of the image in the collection with the specified dimensions
            </summary>
            <param name="width">The width of the image in pixels</param>
            <param name="height">The height of the image in pixels</param>
            <param name="instance">The instance of the image</param>
            <returns></returns>
            <example>
            The following example gets the third image that is 100x30 pixels.
            <code lang="csharp">
            Image myImage = myWebZincObject.Images.FindByDimensions(100,30,3);
            </code>
            <code lang="vb">
            Dim myImage As Image = myWebZincObject.Images.FindByDimensions(100,30,3)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ImageCollection.FindByDimensions(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the specified instance of the image in the collection with the specified dimensions
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="instance"></param>
            <param name="minimum">Indicates whether or not the width and height are minimum
            requirements rather than exact</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Collections.ImageCollection.FindAllByDimensions(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an ImageCollection of all the images with the specified dimensions
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="minimum">Indicates that any image over the specified width and height should also be included.</param>
            <returns></returns>
        </member>
        <member name="P:WhiteCliff.WebZinc.Collections.ImageCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:WhiteCliff.WebZinc.Objects.Image"/> object at the specified index
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.RuleCondition">
            <summary>
            An enumeration of Rule conditions
            </summary>
            <remarks>
            Used by the <see cref="T:WhiteCliff.WebZinc.Objects.Rule"/> object. See the various constructors of Rule examples of their use.
            </remarks>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleCondition.None">
            <summary>
            Always apply the rule
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleCondition.ContainsString">
            <summary>
            Apply the rule if the object contains the specified string
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleCondition.ContainsWord">
            <summary>
            Apply the rule if the object contains the specified word
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleCondition.StartsWith">
            <summary>
            Apply the rule if the object starts with the specified string
            </summary>
        </member>
        <member name="F:WhiteCliff.WebZinc.Objects.RuleCondition.EndsWith">
            <summary>
            Apply the rule if the object ends with the specified string
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.Rule">
            <summary>
            Provides instructions for WebZinc to apply when retreiving pages
            </summary>
            <remarks>See the various constructors for further examples.</remarks>
            <example>
            The sample below demonstrates creating a new rule that removes all Paragraphs containing the text "advertisement":
            <code lang="vb">
            Dim myRule As New Rule(PageObjectType.Paragraph, RuleCondition.ContainsWord, "advertisement", true)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor">
            <summary>
            Initializes the Rule with default values
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor(WhiteCliff.WebZinc.Objects.PageObjectType,WhiteCliff.WebZinc.Objects.TextProcFunction)">
            <summary>
            Initializes the Rule with a function (with no parameters, or to be set later) and the objects to apply it to.
            </summary>
            <param name="appliesTo">The objects to apply the specified function to</param>
            <param name="functionName">The function to apply</param>
            <example>
            <code lang="vb">
            ' creates a rule that calls GetFirstSentence
            ' on all paragraph objects
            Dim myRule As New Rule(PageObjectType.Paragraph, TextProcFunction.GetFirstSentence)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor(WhiteCliff.WebZinc.Objects.PageObjectType,WhiteCliff.WebZinc.Objects.TextProcFunction,WhiteCliff.WebZinc.Objects.RuleCondition,System.String)">
            <summary>
            Initializes the Rule with a function (with no parameters, or to be set later), the objects to apply it to, and the conditions under which the function should be run.
            </summary>
            <param name="appliesTo">The objects to apply the specified function to.</param>
            <param name="conditionType">The type of condition to apply.</param>
            <param name="conditionValue">The value that the condition must satisfy.</param>
            <param name="functionName">The function to apply.</param>
            <example>
            <code lang="vb">
            ' creates a rule that calls GetFirstSentence
            ' on all paragraph objects that contain the
            ' word "partner"
            Dim myRule As New Rule(PageObjectType.Paragraph, TextProcFunction.GetFirstSentence, RuleCondition.ContainsWord, "partner")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor(WhiteCliff.WebZinc.Objects.PageObjectType,WhiteCliff.WebZinc.Objects.RuleCondition,System.String,System.Boolean)">
            <summary>
            Initializes the Rule with the specified data
            </summary>
            <param name="appliesTo">The objects to apply the specified function to.</param>
            <param name="conditionType">The type of condition to apply.</param>
            <param name="conditionValue">The value that the condition must satisfy.</param>
            <param name="invalidateObject">Should be set to true to invalidate (remove) the object if the conditions are satisfied.</param>
            <example>
            <code lang="vb">
            ' creates a rule that removes all
            ' paragraphs starting with partners
            Dim myRule As New Rule(PageObjectType.Paragraph, RuleCondition.StartsWith, "partners", true)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor(WhiteCliff.WebZinc.Objects.PageObjectType,WhiteCliff.WebZinc.Objects.RuleCondition,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes the Rule with the specified data
            </summary>
            <param name="appliesTo">The objects to apply the specified function to.</param>
            <param name="conditionType">The type of condition to apply.</param>
            <param name="conditionValue">The value that the condition must satisfy.</param>
            <param name="invalidateObject">Should be set to true to invalidate the object if the conditions are satisfied.</param>
            <param name="negateCondition">A value indicating whether to reverse the condition.</param>
            <example>
            <code lang="vb">
            ' creates a rule that removes all
            ' paragraphs that *do not* contain the word "partners"
            Dim myRule As New Rule(PageObjectType.Paragraph, RuleCondition.ContainsWord, "partners", true, true)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor(WhiteCliff.WebZinc.Objects.PageObjectType,WhiteCliff.WebZinc.Objects.RuleCondition,System.String,WhiteCliff.WebZinc.Collections.RuleActionCollection)">
            <summary>
            Initializes the Rule with the specified data
            </summary>
            <param name="appliesTo">The objects to apply the specified function to.</param>
            <param name="conditionType">The type of condition to apply.</param>
            <param name="conditionValue">The value that the condition must satisfy.</param>
            <param name="actions">The collection of <see cref="T:WhiteCliff.WebZinc.Objects.RuleAction"/>'s to perform</param>
            <example>
            <code lang="vb">
            ' create a set of actions to be performed
            Dim myActions As RuleActionCollection = New RuleActionCollection()
            ' get all the text after the word "fred"
            myActions.Add( New RuleAction(TextProcFunction.GetTextAfterWord, "fred") )
            ' change that text to proper case
            myActions.Add( New RuleAction(TextProcFunction.ChangeCase, CaseType.ProperCase ) )
            ' and apply that set of actions to paragraphs containing the word "Partner"
            Dim myRule As New Rule(PageObjectType.Paragraph, RuleCondition.ContainsWord, "partner", myActions)
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.Rule.#ctor(WhiteCliff.WebZinc.Objects.PageObjectType,WhiteCliff.WebZinc.Collections.RuleActionCollection)">
            <summary>
            Initializes the Rule with the specified data
            </summary>
            <param name="appliesTo">The objects to apply the specified function to.</param>
            <param name="actions">The actions to perform</param>
            <example>
            <code lang="vb">
            ' create a set of actions to be performed
            Dim myActions As RuleActionCollection = New RuleActionCollection()
            ' get all the text after the word "fred"
            myActions.Add( New RuleAction(TextProcFunction.GetTextAfterWord, "fred") )
            ' change that text to proper case
            myActions.Add( New RuleAction(TextProcFunction.ChangeCase, CaseType.ProperCase ) )
            ' and apply that set of actions to all paragraphs
            Dim myRule As New Rule(PageObjectType.Paragraph, myActions)
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.ApplyRule">
            <summary>
            Gets or sets a boolean value indicating whether the rule should be applied.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.Actions">
            <summary>
            Gets or sets a RuleActionCollection of actions to perform for this rule
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.InvalidateObject">
            <summary>
            Gets or sets a boolean value indicating whether this rule should
            invalidate the object it is applied to if the condition is not
            satisfied.
            </summary>
            <remarks>
            You should set either this, or the Actions property for the rule. Only applies to Paragraph and Links.
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.Domain">
            <summary>
            The domain this rule applies to.
            </summary>
            <remarks>
            Leave blank to apply to all domains.
            </remarks>
            <example>
            The following example creates a rule that only applies to pages
            within the microsoft.com domain.
            <code lang="csharp">
            Rule ruleObject = new Rule()
            ruleObject.Domain = "microsoft.com"
            </code>
            </example>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.AppliesTo">
            <summary>
            Gets or sets a PageObjectType specifying which objects to apply
            this rule to.
            </summary>
            <remarks>
            Rules are only applied to the Text property of an object
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.NegateCondition">
            <summary>
            Negates (reverses) the condition for this rule. 
            </summary>
            <example>
            This sample demonstrates the usage of the NegateCondition property. The rule it creates
            will only be triggered on objects that does not contain the word "WebZinc"
            <code lang="csharp">
            Rule rule = new Rule();
            rule.ConditionType = RuleConditionType.ContainsWord
            rule.Condition = "WebZinc"
            rule.ConditionNegate = true;
            </code>
            </example>
            <remarks>
            For example, if the Condition is set to ContainsWord, then
            this will change the condition to !ContainsWord.
            </remarks>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.ConditionValue">
            <summary>
            Gets or sets a string to be used in combination with the ConditionType
            property in order to apply a condition.
            <seealso cref="P:WhiteCliff.WebZinc.Objects.Rule.NegateCondition"/>
            <seealso cref="P:WhiteCliff.WebZinc.Objects.Rule.ConditionType"/>
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.Rule.ConditionType">
            <summary>
            Gets or sets a RuleConditionType object indicating the type of condition 
            under which this rule is applied.
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Objects.FormSelectField">
            <summary>
            Represents a ComboBox selection field in a <see cref="T:WhiteCliff.WebZinc.Objects.Form"/> object
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Objects.FormSelectField.Click">
            <summary>
            Simulates a user clicking the input field
            </summary>
            <exception cref="T:WhiteCliff.WebZinc.WebZincException">When this field is not used from the <see cref="T:WhiteCliff.WebZinc.WebZincUI"/> object</exception>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormSelectField.SelectedIndex">
            <summary>
            Gets or sets the currently selected index of this select field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormSelectField.Options">
            <summary>
            Gets the <see cref="T:WhiteCliff.WebZinc.Collections.FormOptionFieldCollection"/> object associated with this class
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormSelectField.Value">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormSelectField.Name">
            <summary>
            The value of this input field
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormSelectField.Multiple">
            <summary>
            Gets a boolean value indicating if the select field allows multiple
            options to be selected.
            </summary>
        </member>
        <member name="P:WhiteCliff.WebZinc.Objects.FormSelectField.LabelText">
            <summary>
            Attempts to determine the "label" associated with this field
            </summary>
        </member>
        <member name="T:WhiteCliff.WebZinc.Extras.ComInterop">
            <summary>
            Provides useful functions for using WebZinc from VB 6 and other COM supporting environments
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WhiteCliff.WebZinc.Extras.ComInterop"/> class
            </summary>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.CreateCredentials(System.String,System.String)">
            <summary>
            Creates a NetworkCredential object using the specified username and password
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
            <example>
            The following example demonstrates how to use the CreateCredentials function to set the
            Credentials property of the WebZinc Configuration object
            <code>
            Set myWebZincObject.Settings.Credentials = myComInteropObject.CreateCredentials("myUsername","myPassword")
            </code>
            </example>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.GetCookies(System.Net.CookieCollection,System.String[]@,System.String[]@)">
            <summary>
            Gets two arrays of names and values from a CookieCollection object
            </summary>
            <param name="cookies"></param>
            <param name="names"></param>
            <param name="values"></param>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.CreateCookies(System.String[]@,System.String[]@)">
            <summary>
            Creates a CookieCollection object from two arrays of names and values
            </summary>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.LoadAutoZinc(System.String)">
            <summary>
            Provides access to the static <see cref="M:WhiteCliff.WebZinc.Xml.AutoZinc.Load(System.String)"/> method
            for environments that do not support static members.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.LoadRules(System.String)">
            <summary>
            Provides access to the static <see cref="M:WhiteCliff.WebZinc.Collections.RuleCollection.Load(System.String)"/> method
            for environments that do not support static members.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.LoadSettings(System.String)">
            <summary>
            Provides access to the static <see cref="M:WhiteCliff.WebZinc.Configuration.Load(System.String)"/> method
            for environments that do not support static members.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.CreateProxy(System.String,System.Boolean,System.String[]@,System.String,System.String)">
            <summary>
            Creates an IWebProxy object using the specified parameters
            </summary>
            <param name="address">The address of the proxy (including appropriate port number)</param>
            <param name="bypassOnLocal">true to bypass the proxy for local addresses; otherwise, false.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="userName">The username this proxy requires to access it.</param>
            <param name="password">The password this proxy requires to access it.</param>
            <returns></returns>
        </member>
        <member name="M:WhiteCliff.WebZinc.Extras.ComInterop.GetDefaultProxy">
            <summary>
            Gets a default proxy
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
